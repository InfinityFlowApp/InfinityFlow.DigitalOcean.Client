// <auto-generated/>
#pragma warning disable CS0618
using InfinityFlow.DigitalOcean.Client.Models;
using InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.Snapshots
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\snapshots
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SnapshotsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the InfinityFlow.DigitalOcean.Client.v2.snapshots.item collection</summary>
        /// <param name="position">Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot.</param>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item.WithSnapshot_ItemRequestBuilder"/></returns>
        public global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item.WithSnapshot_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("snapshot_id", position);
                return new global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item.WithSnapshot_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the InfinityFlow.DigitalOcean.Client.v2.snapshots.item collection</summary>
        /// <param name="position">Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot.</param>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item.WithSnapshot_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item.WithSnapshot_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("snapshot_id", position);
                return new global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.Item.WithSnapshot_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SnapshotsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/snapshots{?page*,per_page*,resource_type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SnapshotsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/snapshots{?page*,per_page*,resource_type*}", rawUrl)
        {
        }
        /// <summary>
        /// To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt&apos;s possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsGetResponse?> GetAsSnapshotsGetResponseAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsGetResponse> GetAsSnapshotsGetResponseAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsGetResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt&apos;s possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsSnapshotsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsResponse?> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsResponse> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt&apos;s possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// To list all of the snapshots available on your account, send a GET request to`/v2/snapshots`.The response will be a JSON object with a key called `snapshots`. This will beset to an array of `snapshot` objects, each of which will contain the standardsnapshot attributes.### Filtering Results by Resource TypeIt&apos;s possible to request filtered results by including certain query parameters.#### List Droplet SnapshotsTo retrieve only snapshots based on Droplets, include the `resource_type`query parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.#### List Volume SnapshotsTo retrieve only snapshots based on volumes, include the `resource_type`query parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SnapshotsRequestBuilderGetQueryParameters 
        {
            /// <summary>Which &apos;page&apos; of paginated results to return.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items returned per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Used to filter snapshots by a resource type.</summary>
            [Obsolete("This property is deprecated, use ResourceTypeAsGetResourceTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resource_type")]
            public string? ResourceType { get; set; }
#nullable restore
#else
            [QueryParameter("resource_type")]
            public string ResourceType { get; set; }
#endif
            /// <summary>Used to filter snapshots by a resource type.</summary>
            [QueryParameter("resource_type")]
            public global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.GetResource_typeQueryParameterType? ResourceTypeAsGetResourceTypeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SnapshotsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Snapshots.SnapshotsRequestBuilder.SnapshotsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
