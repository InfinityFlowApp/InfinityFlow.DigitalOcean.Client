// <auto-generated/>
#pragma warning disable CS0618
using InfinityFlow.DigitalOcean.Client.V2.GenAi.Agents;
using InfinityFlow.DigitalOcean.Client.V2.GenAi.Anthropic;
using InfinityFlow.DigitalOcean.Client.V2.GenAi.Indexing_jobs;
using InfinityFlow.DigitalOcean.Client.V2.GenAi.Knowledge_bases;
using InfinityFlow.DigitalOcean.Client.V2.GenAi.ModelsRequests;
using InfinityFlow.DigitalOcean.Client.V2.GenAi.Regions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.GenAi
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\gen-ai
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GenAiRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The agents property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Agents.AgentsRequestBuilder Agents
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Agents.AgentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The anthropic property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Anthropic.AnthropicRequestBuilder Anthropic
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Anthropic.AnthropicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The indexing_jobs property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Indexing_jobs.Indexing_jobsRequestBuilder Indexing_jobs
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Indexing_jobs.Indexing_jobsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The knowledge_bases property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Knowledge_bases.Knowledge_basesRequestBuilder Knowledge_bases
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Knowledge_bases.Knowledge_basesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The models property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.GenAi.ModelsRequests.ModelsRequestBuilder Models
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.GenAi.ModelsRequests.ModelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The regions property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Regions.RegionsRequestBuilder Regions
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.GenAi.Regions.RegionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.GenAi.GenAiRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenAiRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/gen-ai", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.GenAi.GenAiRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenAiRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/gen-ai", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618
