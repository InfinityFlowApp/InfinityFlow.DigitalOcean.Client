// <auto-generated/>
#pragma warning disable CS0618
using InfinityFlow.DigitalOcean.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\kubernetes\clusters\{cluster_id}\node_pools\{node_pool_id}\nodes\{node_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithNode_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNode_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}{?replace*,skip_drain*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNode_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}{?replace*,skip_drain*}", rawUrl)
        {
        }
        /// <summary>
        /// To delete a single node in a pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.Appending the `skip_drain=1` query parameter to the request causes nodedraining to be skipped. Omitting the query parameter or setting its value to`0` carries out draining prior to deletion.Appending the `replace=1` query parameter to the request causes the node tobe replaced by a new one after deletion. Omitting the query parameter orsetting its value to `0` deletes without replacement.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder.WithNode_ItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder.WithNode_ItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To delete a single node in a pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.Appending the `skip_drain=1` query parameter to the request causes nodedraining to be skipped. Omitting the query parameter or setting its value to`0` carries out draining prior to deletion.Appending the `replace=1` query parameter to the request causes the node tobe replaced by a new one after deletion. Omitting the query parameter orsetting its value to `0` deletes without replacement.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder.WithNode_ItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder.WithNode_ItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// To delete a single node in a pool, send a DELETE request to`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.Appending the `skip_drain=1` query parameter to the request causes nodedraining to be skipped. Omitting the query parameter or setting its value to`0` carries out draining prior to deletion.Appending the `replace=1` query parameter to the request causes the node tobe replaced by a new one after deletion. Omitting the query parameter orsetting its value to `0` deletes without replacement.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithNode_ItemRequestBuilderDeleteQueryParameters 
        {
            /// <summary>Specifies whether or not to replace a node after it has been deleted. Setting it to `1` causes the node to be replaced by a new one after deletion. Omitting the query parameter or setting its value to `0` deletes without replacement.</summary>
            [QueryParameter("replace")]
            public int? Replace { get; set; }
            /// <summary>Specifies whether or not to drain workloads from a node before it is deleted. Setting it to `1` causes node draining to be skipped. Omitting the query parameter or setting its value to `0` carries out draining prior to deletion.</summary>
            [QueryParameter("skip_drain")]
            public int? SkipDrain { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithNode_ItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Kubernetes.Clusters.Item.Node_pools.Item.Nodes.Item.WithNode_ItemRequestBuilder.WithNode_ItemRequestBuilderDeleteQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
