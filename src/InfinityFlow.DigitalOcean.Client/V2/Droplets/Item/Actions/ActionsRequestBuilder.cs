// <auto-generated/>
#pragma warning disable CS0618
using InfinityFlow.DigitalOcean.Client.Models;
using InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\droplets\{droplet_id}\actions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ActionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the InfinityFlow.DigitalOcean.Client.v2.droplets.item.actions.item collection</summary>
        /// <param name="position">A unique numeric ID that can be used to identify and reference an action.</param>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item.WithAction_ItemRequestBuilder"/></returns>
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item.WithAction_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("action_id", position);
                return new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item.WithAction_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the InfinityFlow.DigitalOcean.Client.v2.droplets.item.actions.item collection</summary>
        /// <param name="position">A unique numeric ID that can be used to identify and reference an action.</param>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item.WithAction_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item.WithAction_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("action_id", position);
                return new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.Item.WithAction_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ActionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/droplets/{droplet_id}/actions{?page*,per_page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ActionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/droplets/{droplet_id}/actions{?page*,per_page*}", rawUrl)
        {
        }
        /// <summary>
        /// To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsGetResponse?> GetAsActionsGetResponseAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsGetResponse> GetAsActionsGetResponseAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsGetResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsActionsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse?> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To initiate an action on a Droplet send a POST request to`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action                                   | Details || ---------------------------------------- | ----------- || &lt;nobr&gt;`enable_backups`&lt;/nobr&gt;            | Enables backups for a Droplet || &lt;nobr&gt;`disable_backups`&lt;/nobr&gt;           | Disables backups for a Droplet || &lt;nobr&gt;`change_backup_policy`&lt;/nobr&gt;      | Update the backup policy for a Droplet || &lt;nobr&gt;`reboot`&lt;/nobr&gt;                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. || &lt;nobr&gt;`power_cycle`&lt;/nobr&gt;               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it&apos;s similar to booting from scratch. || &lt;nobr&gt;`shutdown`&lt;/nobr&gt;                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. || &lt;nobr&gt;`power_off`&lt;/nobr&gt;                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. || &lt;nobr&gt;`power_on`&lt;/nobr&gt;                  | Powers on a Droplet. || &lt;nobr&gt;`restore`&lt;/nobr&gt;                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. || &lt;nobr&gt;`password_reset`&lt;/nobr&gt;            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. || &lt;nobr&gt;`resize`&lt;/nobr&gt;                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. || &lt;nobr&gt;`rebuild`&lt;/nobr&gt;                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. || &lt;nobr&gt;`rename`&lt;/nobr&gt;                    | Renames a Droplet. || &lt;nobr&gt;`change_kernel`&lt;/nobr&gt;             | Changes a Droplet&apos;s kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. || &lt;nobr&gt;`enable_ipv6`&lt;/nobr&gt;               | Enables IPv6 for a Droplet. Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on an existing Droplet, [additional OS-level configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets) is required. || &lt;nobr&gt;`snapshot`&lt;/nobr&gt;                  | Takes a snapshot of a Droplet. |
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsPostResponse?> PostAsActionsPostResponseAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsPostResponse> PostAsActionsPostResponseAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsPostResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To initiate an action on a Droplet send a POST request to`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action                                   | Details || ---------------------------------------- | ----------- || &lt;nobr&gt;`enable_backups`&lt;/nobr&gt;            | Enables backups for a Droplet || &lt;nobr&gt;`disable_backups`&lt;/nobr&gt;           | Disables backups for a Droplet || &lt;nobr&gt;`change_backup_policy`&lt;/nobr&gt;      | Update the backup policy for a Droplet || &lt;nobr&gt;`reboot`&lt;/nobr&gt;                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. || &lt;nobr&gt;`power_cycle`&lt;/nobr&gt;               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it&apos;s similar to booting from scratch. || &lt;nobr&gt;`shutdown`&lt;/nobr&gt;                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. || &lt;nobr&gt;`power_off`&lt;/nobr&gt;                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. || &lt;nobr&gt;`power_on`&lt;/nobr&gt;                  | Powers on a Droplet. || &lt;nobr&gt;`restore`&lt;/nobr&gt;                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. || &lt;nobr&gt;`password_reset`&lt;/nobr&gt;            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. || &lt;nobr&gt;`resize`&lt;/nobr&gt;                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. || &lt;nobr&gt;`rebuild`&lt;/nobr&gt;                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. || &lt;nobr&gt;`rename`&lt;/nobr&gt;                    | Renames a Droplet. || &lt;nobr&gt;`change_kernel`&lt;/nobr&gt;             | Changes a Droplet&apos;s kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. || &lt;nobr&gt;`enable_ipv6`&lt;/nobr&gt;               | Enables IPv6 for a Droplet. Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on an existing Droplet, [additional OS-level configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets) is required. || &lt;nobr&gt;`snapshot`&lt;/nobr&gt;                  | Takes a snapshot of a Droplet. |
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use PostAsActionsPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse?> PostAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse> PostAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// To initiate an action on a Droplet send a POST request to`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,set the `type` attribute to on of the supported action types:| Action                                   | Details || ---------------------------------------- | ----------- || &lt;nobr&gt;`enable_backups`&lt;/nobr&gt;            | Enables backups for a Droplet || &lt;nobr&gt;`disable_backups`&lt;/nobr&gt;           | Disables backups for a Droplet || &lt;nobr&gt;`change_backup_policy`&lt;/nobr&gt;      | Update the backup policy for a Droplet || &lt;nobr&gt;`reboot`&lt;/nobr&gt;                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. || &lt;nobr&gt;`power_cycle`&lt;/nobr&gt;               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it&apos;s similar to booting from scratch. || &lt;nobr&gt;`shutdown`&lt;/nobr&gt;                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. || &lt;nobr&gt;`power_off`&lt;/nobr&gt;                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. || &lt;nobr&gt;`power_on`&lt;/nobr&gt;                  | Powers on a Droplet. || &lt;nobr&gt;`restore`&lt;/nobr&gt;                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. || &lt;nobr&gt;`password_reset`&lt;/nobr&gt;            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. || &lt;nobr&gt;`resize`&lt;/nobr&gt;                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. || &lt;nobr&gt;`rebuild`&lt;/nobr&gt;                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. || &lt;nobr&gt;`rename`&lt;/nobr&gt;                    | Renames a Droplet. || &lt;nobr&gt;`change_kernel`&lt;/nobr&gt;             | Changes a Droplet&apos;s kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. || &lt;nobr&gt;`enable_ipv6`&lt;/nobr&gt;               | Enables IPv6 for a Droplet. Once enabled for a Droplet, IPv6 can not be disabled. When enabling IPv6 on an existing Droplet, [additional OS-level configuration](https://docs.digitalocean.com/products/networking/ipv6/how-to/enable/#on-existing-droplets) is required. || &lt;nobr&gt;`snapshot`&lt;/nobr&gt;                  | Takes a snapshot of a Droplet. |
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_backup_policy"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_kernel"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_enable_backups"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rebuild"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rename"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_resize"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_restore"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_snapshot"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ActionsPostRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action? DropletAction { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action DropletAction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_backup_policy"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_backup_policy? DropletActionChangeBackupPolicy { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_backup_policy DropletActionChangeBackupPolicy { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_kernel"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_kernel? DropletActionChangeKernel { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_kernel DropletActionChangeKernel { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_enable_backups"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_enable_backups? DropletActionEnableBackups { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_enable_backups DropletActionEnableBackups { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rebuild"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rebuild? DropletActionRebuild { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rebuild DropletActionRebuild { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rename"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rename? DropletActionRename { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rename DropletActionRename { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_resize"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_resize? DropletActionResize { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_resize DropletActionResize { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_restore"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_restore? DropletActionRestore { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_restore DropletActionRestore { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_snapshot"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_snapshot? DropletActionSnapshot { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_snapshot DropletActionSnapshot { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsPostRequestBody();
                result.DropletAction = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action();
                result.DropletActionChangeBackupPolicy = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_backup_policy();
                result.DropletActionChangeKernel = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_change_kernel();
                result.DropletActionEnableBackups = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_enable_backups();
                result.DropletActionRebuild = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rebuild();
                result.DropletActionRename = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_rename();
                result.DropletActionResize = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_resize();
                result.DropletActionRestore = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_restore();
                result.DropletActionSnapshot = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action_snapshot();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DropletAction != null || DropletActionChangeBackupPolicy != null || DropletActionChangeKernel != null || DropletActionEnableBackups != null || DropletActionRebuild != null || DropletActionRename != null || DropletActionResize != null || DropletActionRestore != null || DropletActionSnapshot != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DropletAction, DropletActionChangeBackupPolicy, DropletActionChangeKernel, DropletActionEnableBackups, DropletActionRebuild, DropletActionRename, DropletActionResize, DropletActionRestore, DropletActionSnapshot);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_action>(null, DropletAction, DropletActionChangeBackupPolicy, DropletActionChangeKernel, DropletActionEnableBackups, DropletActionRebuild, DropletActionRename, DropletActionResize, DropletActionRestore, DropletActionSnapshot);
            }
        }
        /// <summary>
        /// To retrieve a list of all actions that have been executed for a Droplet, senda GET request to `/v2/droplets/$DROPLET_ID/actions`.The results will be returned as a JSON object with an `actions` key. This willbe set to an array filled with `action` objects containing the standard`action` attributes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ActionsRequestBuilderGetQueryParameters 
        {
            /// <summary>Which &apos;page&apos; of paginated results to return.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items returned per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ActionsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.Actions.ActionsRequestBuilder.ActionsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ActionsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
