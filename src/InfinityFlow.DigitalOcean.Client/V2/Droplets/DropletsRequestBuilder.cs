// <auto-generated/>
#pragma warning disable CS0618
using InfinityFlow.DigitalOcean.Client.Models;
using InfinityFlow.DigitalOcean.Client.V2.Droplets.Actions;
using InfinityFlow.DigitalOcean.Client.V2.Droplets.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.Droplets
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\droplets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DropletsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Actions.ActionsRequestBuilder Actions
        {
            get => new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the InfinityFlow.DigitalOcean.Client.v2.droplets.item collection</summary>
        /// <param name="position">A unique identifier for a Droplet instance.</param>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.WithDroplet_ItemRequestBuilder"/></returns>
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.WithDroplet_ItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("droplet_id", position);
                return new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.WithDroplet_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the InfinityFlow.DigitalOcean.Client.v2.droplets.item collection</summary>
        /// <param name="position">A unique identifier for a Droplet instance.</param>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.WithDroplet_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.WithDroplet_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("droplet_id", position);
                return new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.Item.WithDroplet_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DropletsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/droplets{?name*,page*,per_page*,tag_name*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DropletsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/droplets{?name*,page*,per_page*,tag_name*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// To delete **all** Droplets assigned to a specific tag, include the `tag_name`query parameter set to the name of the tag in your DELETE request. Forexample,  `/v2/droplets?tag_name=$TAG_NAME`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 404 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt&apos;s possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsGetResponse?> GetAsDropletsGetResponseAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsGetResponse> GetAsDropletsGetResponseAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsGetResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt&apos;s possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsDropletsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsResponse?> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsResponse> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To create a new Droplet, send a POST request to `/v2/droplets` setting therequired attributes.A Droplet will be created using the provided information. The response bodywill contain a JSON object with a key called `droplet`. The value will be anobject containing the standard attributes for your new Droplet. The responsecode, 202 Accepted, does not indicate the success or failure of the operation,just that the request has been accepted for processing. The `actions` returnedas part of the response&apos;s `links` object can be used to check the statusof the Droplet create event.### Create Multiple DropletsCreating multiple Droplets is very similar to creating a single Droplet.Instead of sending `name` as a string, send `names` as an array of strings. ADroplet will be created for each name you send using the associatedinformation. Up to ten Droplets may be created this way at a time.Rather than returning a single Droplet, the response body will contain a JSONarray with a key called `droplets`. This will be set to an array of JSONobjects, each of which will contain the standard Droplet attributes. Theresponse code, 202 Accepted, does not indicate the success or failure of anyoperation, just that the request has been accepted for processing. The arrayof `actions` returned as part of the response&apos;s `links` object can be used tocheck the status of each individual Droplet create event.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse?> PostAsDropletsPostResponseAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse> PostAsDropletsPostResponseAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To create a new Droplet, send a POST request to `/v2/droplets` setting therequired attributes.A Droplet will be created using the provided information. The response bodywill contain a JSON object with a key called `droplet`. The value will be anobject containing the standard attributes for your new Droplet. The responsecode, 202 Accepted, does not indicate the success or failure of the operation,just that the request has been accepted for processing. The `actions` returnedas part of the response&apos;s `links` object can be used to check the statusof the Droplet create event.### Create Multiple DropletsCreating multiple Droplets is very similar to creating a single Droplet.Instead of sending `name` as a string, send `names` as an array of strings. ADroplet will be created for each name you send using the associatedinformation. Up to ten Droplets may be created this way at a time.Rather than returning a single Droplet, the response body will contain a JSONarray with a key called `droplets`. This will be set to an array of JSONobjects, each of which will contain the standard Droplet attributes. Theresponse code, 202 Accepted, does not indicate the success or failure of anyoperation, just that the request has been accepted for processing. The arrayof `actions` returned as part of the response&apos;s `links` object can be used tocheck the status of each individual Droplet create event.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use PostAsDropletsPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse?> PostAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse> PostAsync(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse>(requestInfo, global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// To delete **all** Droplets assigned to a specific tag, include the `tag_name`query parameter set to the name of the tag in your DELETE request. Forexample,  `/v2/droplets?tag_name=$TAG_NAME`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/v2/droplets?tag_name={tag_name}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt&apos;s possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// To create a new Droplet, send a POST request to `/v2/droplets` setting therequired attributes.A Droplet will be created using the provided information. The response bodywill contain a JSON object with a key called `droplet`. The value will be anobject containing the standard attributes for your new Droplet. The responsecode, 202 Accepted, does not indicate the success or failure of the operation,just that the request has been accepted for processing. The `actions` returnedas part of the response&apos;s `links` object can be used to check the statusof the Droplet create event.### Create Multiple DropletsCreating multiple Droplets is very similar to creating a single Droplet.Instead of sending `name` as a string, send `names` as an array of strings. ADroplet will be created for each name you send using the associatedinformation. Up to ten Droplets may be created this way at a time.Rather than returning a single Droplet, the response body will contain a JSONarray with a key called `droplets`. This will be set to an array of JSONobjects, each of which will contain the standard Droplet attributes. Theresponse code, 202 Accepted, does not indicate the success or failure of anyoperation, just that the request has been accepted for processing. The arrayof `actions` returned as part of the response&apos;s `links` object can be used tocheck the status of each individual Droplet create event.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/v2/droplets", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_multi_create"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_single_create"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsPostRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_multi_create"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_multi_create? DropletMultiCreate { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_multi_create DropletMultiCreate { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_single_create"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_single_create? DropletSingleCreate { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_single_create DropletSingleCreate { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostRequestBody();
                if("droplet_multi_create".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DropletMultiCreate = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_multi_create();
                }
                else if("droplet_single_create".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DropletSingleCreate = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_single_create();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DropletMultiCreate != null)
                {
                    return DropletMultiCreate.GetFieldDeserializers();
                }
                else if(DropletSingleCreate != null)
                {
                    return DropletSingleCreate.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DropletMultiCreate != null)
                {
                    writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_multi_create>(null, DropletMultiCreate);
                }
                else if(DropletSingleCreate != null)
                {
                    writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_single_create>(null, DropletSingleCreate);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsPostResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1? DropletsPostResponseMember1 { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1 DropletsPostResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2? DropletsPostResponseMember2 { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2 DropletsPostResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsPostResponse();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DropletsPostResponseMember1 = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DropletsPostResponseMember2 = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DropletsPostResponseMember1 != null)
                {
                    return DropletsPostResponseMember1.GetFieldDeserializers();
                }
                else if(DropletsPostResponseMember2 != null)
                {
                    return DropletsPostResponseMember2.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DropletsPostResponseMember1 != null)
                {
                    writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1>(null, DropletsPostResponseMember1);
                }
                else if(DropletsPostResponseMember2 != null)
                {
                    writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2>(null, DropletsPostResponseMember2);
                }
            }
        }
        /// <summary>
        /// To delete **all** Droplets assigned to a specific tag, include the `tag_name`query parameter set to the name of the tag in your DELETE request. Forexample,  `/v2/droplets?tag_name=$TAG_NAME`.A successful request will receive a 204 status code with no body in response.This indicates that the request was processed successfully.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsRequestBuilderDeleteQueryParameters 
        {
            /// <summary>Specifies Droplets to be deleted by tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tag_name")]
            public string? TagName { get; set; }
#nullable restore
#else
            [QueryParameter("tag_name")]
            public string TagName { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// To list all Droplets in your account, send a GET request to `/v2/droplets`.The response body will be a JSON object with a key of `droplets`. This will beset to an array containing objects each representing a Droplet. These willcontain the standard Droplet attributes.### Filtering Results by TagIt&apos;s possible to request filtered results by including certain query parameters.To only list Droplets assigned to a specific tag, include the `tag_name` queryparameter set to the name of the tag in your GET request. For example,`/v2/droplets?tag_name=$TAG_NAME`.### GPU DropletsBy default, only non-GPU Droplets are returned. To list only GPU Droplets, setthe `type` query parameter to `gpus`. For example, `/v2/droplets?type=gpus`.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsRequestBuilderGetQueryParameters 
        {
            /// <summary>Used to filter list response by Droplet name returning only exact matches. It is case-insensitive and can not be combined with `tag_name`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>Which &apos;page&apos; of paginated results to return.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Number of items returned per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>Used to filter Droplets by a specific tag. Can not be combined with `name` or `type`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tag_name")]
            public string? TagName { get; set; }
#nullable restore
#else
            [QueryParameter("tag_name")]
            public string TagName { get; set; }
#endif
            /// <summary>When `type` is set to `gpus`, only GPU Droplets will be returned. By default, only non-GPU Droplets are returned. Can not be combined with `tag_name`.</summary>
            [Obsolete("This property is deprecated, use TypeAsGetTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            /// <summary>When `type` is set to `gpus`, only GPU Droplets will be returned. By default, only non-GPU Droplets are returned. Can not be combined with `tag_name`.</summary>
            [QueryParameter("type")]
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.GetTypeQueryParameterType? TypeAsGetTypeQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1"/>, <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DropletsResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1? DropletsPostResponseMember1 { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1 DropletsPostResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2? DropletsPostResponseMember2 { get; set; }
#nullable restore
#else
            public global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2 DropletsPostResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsRequestBuilder.DropletsResponse();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DropletsPostResponseMember1 = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.DropletsPostResponseMember2 = new global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DropletsPostResponseMember1 != null)
                {
                    return DropletsPostResponseMember1.GetFieldDeserializers();
                }
                else if(DropletsPostResponseMember2 != null)
                {
                    return DropletsPostResponseMember2.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DropletsPostResponseMember1 != null)
                {
                    writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember1>(null, DropletsPostResponseMember1);
                }
                else if(DropletsPostResponseMember2 != null)
                {
                    writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.V2.Droplets.DropletsPostResponseMember2>(null, DropletsPostResponseMember2);
                }
            }
        }
    }
}
#pragma warning restore CS0618
