// <auto-generated/>
#pragma warning disable CS0618
using InfinityFlow.DigitalOcean.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\registry\docker-credentials
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DockerCredentialsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DockerCredentialsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/registry/docker-credentials{?expiry_seconds*,read_write*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DockerCredentialsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/registry/docker-credentials{?expiry_seconds*,read_write*}", rawUrl)
        {
        }
        /// <summary>
        /// In order to access your container registry with the Docker client or from aKubernetes cluster, you will need to configure authentication. The necessaryJSON configuration can be retrieved by sending a GET request to`/v2/registry/docker-credentials`.The response will be in the format of a Docker `config.json` file. To use theconfig in your Kubernetes cluster, create a Secret with:    kubectl create secret generic docr \      --from-file=.dockerconfigjson=config.json \      --type=kubernetes.io/dockerconfigjsonBy default, the returned credentials have read-only access to your registryand cannot be used to push images. This is appropriate for most Kubernetesclusters. To retrieve read/write credentials, suitable for use with the Dockerclient or in a CI system, read_write may be provided as query parameter. Forexample: `/v2/registry/docker-credentials?read_write=true`By default, the returned credentials will not expire. To retrieve credentialswith an expiry set, expiry_seconds may be provided as a query parameter. Forexample: `/v2/registry/docker-credentials?expiry_seconds=3600` will returncredentials that expire after one hour.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Docker_credentials"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 429 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 500 status code</exception>
        /// <exception cref="global::InfinityFlow.DigitalOcean.Client.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::InfinityFlow.DigitalOcean.Client.Models.Docker_credentials?> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder.DockerCredentialsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::InfinityFlow.DigitalOcean.Client.Models.Docker_credentials> GetAsync(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder.DockerCredentialsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "429", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "500", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
                { "XXX", global::InfinityFlow.DigitalOcean.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::InfinityFlow.DigitalOcean.Client.Models.Docker_credentials>(requestInfo, global::InfinityFlow.DigitalOcean.Client.Models.Docker_credentials.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// In order to access your container registry with the Docker client or from aKubernetes cluster, you will need to configure authentication. The necessaryJSON configuration can be retrieved by sending a GET request to`/v2/registry/docker-credentials`.The response will be in the format of a Docker `config.json` file. To use theconfig in your Kubernetes cluster, create a Secret with:    kubectl create secret generic docr \      --from-file=.dockerconfigjson=config.json \      --type=kubernetes.io/dockerconfigjsonBy default, the returned credentials have read-only access to your registryand cannot be used to push images. This is appropriate for most Kubernetesclusters. To retrieve read/write credentials, suitable for use with the Dockerclient or in a CI system, read_write may be provided as query parameter. Forexample: `/v2/registry/docker-credentials?read_write=true`By default, the returned credentials will not expire. To retrieve credentialswith an expiry set, expiry_seconds may be provided as a query parameter. Forexample: `/v2/registry/docker-credentials?expiry_seconds=3600` will returncredentials that expire after one hour.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder.DockerCredentialsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder.DockerCredentialsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// In order to access your container registry with the Docker client or from aKubernetes cluster, you will need to configure authentication. The necessaryJSON configuration can be retrieved by sending a GET request to`/v2/registry/docker-credentials`.The response will be in the format of a Docker `config.json` file. To use theconfig in your Kubernetes cluster, create a Secret with:    kubectl create secret generic docr \      --from-file=.dockerconfigjson=config.json \      --type=kubernetes.io/dockerconfigjsonBy default, the returned credentials have read-only access to your registryand cannot be used to push images. This is appropriate for most Kubernetesclusters. To retrieve read/write credentials, suitable for use with the Dockerclient or in a CI system, read_write may be provided as query parameter. Forexample: `/v2/registry/docker-credentials?read_write=true`By default, the returned credentials will not expire. To retrieve credentialswith an expiry set, expiry_seconds may be provided as a query parameter. Forexample: `/v2/registry/docker-credentials?expiry_seconds=3600` will returncredentials that expire after one hour.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DockerCredentialsRequestBuilderGetQueryParameters 
        {
            /// <summary>The duration in seconds that the returned registry credentials will be valid. If not set or 0, the credentials will not expire.</summary>
            [QueryParameter("expiry_seconds")]
            public int? ExpirySeconds { get; set; }
            /// <summary>By default, the registry credentials allow for read-only access. Set this query parameter to `true` to obtain read-write credentials.</summary>
            [QueryParameter("read_write")]
            public bool? ReadWrite { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DockerCredentialsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::InfinityFlow.DigitalOcean.Client.V2.Registry.DockerCredentials.DockerCredentialsRequestBuilder.DockerCredentialsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
