// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.V2.Registry.Options
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OptionsGetResponse_options_subscription_tiers : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.</summary>
        public bool? AllowStorageOverage { get; set; }
        /// <summary>If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers_eligibility_reasons?>? EligibilityReasons { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers_eligibility_reasons?> EligibilityReasons { get; set; }
#endif
        /// <summary>A boolean indicating whether your account it eligible to use a certain subscription tier.</summary>
        public bool? Eligible { get; set; }
        /// <summary>The amount of outbound data transfer included in the subscription tier in bytes.</summary>
        public int? IncludedBandwidthBytes { get; set; }
        /// <summary>The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.</summary>
        public int? IncludedRepositories { get; set; }
        /// <summary>The amount of storage included in the subscription tier in bytes.</summary>
        public int? IncludedStorageBytes { get; set; }
        /// <summary>The monthly cost of the subscription tier in cents.</summary>
        public int? MonthlyPriceInCents { get; set; }
        /// <summary>The name of the subscription tier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The slug identifier of the subscription tier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.</summary>
        public int? StorageOveragePriceInCents { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers"/> and sets the default values.
        /// </summary>
        public OptionsGetResponse_options_subscription_tiers()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_storage_overage", n => { AllowStorageOverage = n.GetBoolValue(); } },
                { "eligibility_reasons", n => { EligibilityReasons = n.GetCollectionOfEnumValues<global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers_eligibility_reasons>()?.AsList(); } },
                { "eligible", n => { Eligible = n.GetBoolValue(); } },
                { "included_bandwidth_bytes", n => { IncludedBandwidthBytes = n.GetIntValue(); } },
                { "included_repositories", n => { IncludedRepositories = n.GetIntValue(); } },
                { "included_storage_bytes", n => { IncludedStorageBytes = n.GetIntValue(); } },
                { "monthly_price_in_cents", n => { MonthlyPriceInCents = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
                { "storage_overage_price_in_cents", n => { StorageOveragePriceInCents = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_storage_overage", AllowStorageOverage);
            writer.WriteCollectionOfEnumValues<global::InfinityFlow.DigitalOcean.Client.V2.Registry.Options.OptionsGetResponse_options_subscription_tiers_eligibility_reasons>("eligibility_reasons", EligibilityReasons);
            writer.WriteBoolValue("eligible", Eligible);
            writer.WriteIntValue("included_bandwidth_bytes", IncludedBandwidthBytes);
            writer.WriteIntValue("included_repositories", IncludedRepositories);
            writer.WriteIntValue("included_storage_bytes", IncludedStorageBytes);
            writer.WriteIntValue("monthly_price_in_cents", MonthlyPriceInCents);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("slug", Slug);
            writer.WriteIntValue("storage_overage_price_in_cents", StorageOveragePriceInCents);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
