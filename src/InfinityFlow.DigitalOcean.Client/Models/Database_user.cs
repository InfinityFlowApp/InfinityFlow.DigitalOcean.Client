// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Database_user : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Access certificate for TLS client authentication. (Kafka only)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessCert { get; private set; }
#nullable restore
#else
        public string AccessCert { get; private set; }
#endif
        /// <summary>Access key for TLS client authentication. (Kafka only)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessKey { get; private set; }
#nullable restore
#else
        public string AccessKey { get; private set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The mysql_settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Mysql_settings? MysqlSettings { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Mysql_settings MysqlSettings { get; set; }
#endif
        /// <summary>The name of a database user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A randomly generated password for the database user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; private set; }
#nullable restore
#else
        public string Password { get; private set; }
#endif
        /// <summary>A string representing the database user&apos;s role. The value will be either&quot;primary&quot; or &quot;normal&quot;.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_user_role? Role { get; private set; }
        /// <summary>The settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.User_settings? Settings { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.User_settings Settings { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Database_user"/> and sets the default values.
        /// </summary>
        public Database_user()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Database_user"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Database_user CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Database_user();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access_cert", n => { AccessCert = n.GetStringValue(); } },
                { "access_key", n => { AccessKey = n.GetStringValue(); } },
                { "mysql_settings", n => { MysqlSettings = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Mysql_settings>(global::InfinityFlow.DigitalOcean.Client.Models.Mysql_settings.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "role", n => { Role = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_user_role>(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.User_settings>(global::InfinityFlow.DigitalOcean.Client.Models.User_settings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Mysql_settings>("mysql_settings", MysqlSettings);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.User_settings>("settings", Settings);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
