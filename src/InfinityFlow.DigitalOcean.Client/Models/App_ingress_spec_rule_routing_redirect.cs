// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// The redirect configuration for the rule. Only one of `component` or `redirect` may be set.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class App_ingress_spec_rule_routing_redirect : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authority/host to redirect to. This can be a hostname or IP address. Note: use `port` to set the port.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Authority { get; set; }
#nullable restore
#else
        public string Authority { get; set; }
#endif
        /// <summary>The port to redirect to.</summary>
        public long? Port { get; set; }
        /// <summary>The redirect code to use. Defaults to `302`. Supported values are 300, 301, 302, 303, 304, 307, 308.</summary>
        public long? RedirectCode { get; set; }
        /// <summary>The scheme to redirect to. Supported values are `http` or `https`. Default: `https`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scheme { get; set; }
#nullable restore
#else
        public string Scheme { get; set; }
#endif
        /// <summary>An optional URI path to redirect to. Note: if this is specified the whole URI of the original request will be overwritten to this value, irrespective of the original request URI being matched.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uri { get; set; }
#nullable restore
#else
        public string Uri { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_ingress_spec_rule_routing_redirect"/> and sets the default values.
        /// </summary>
        public App_ingress_spec_rule_routing_redirect()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_ingress_spec_rule_routing_redirect"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.App_ingress_spec_rule_routing_redirect CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.App_ingress_spec_rule_routing_redirect();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authority", n => { Authority = n.GetStringValue(); } },
                { "port", n => { Port = n.GetLongValue(); } },
                { "redirect_code", n => { RedirectCode = n.GetLongValue(); } },
                { "scheme", n => { Scheme = n.GetStringValue(); } },
                { "uri", n => { Uri = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("authority", Authority);
            writer.WriteLongValue("port", Port);
            writer.WriteLongValue("redirect_code", RedirectCode);
            writer.WriteStringValue("scheme", Scheme);
            writer.WriteStringValue("uri", Uri);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
