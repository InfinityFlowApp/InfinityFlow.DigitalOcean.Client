// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// A Chatbot
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiChatbot : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The button_background_color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ButtonBackgroundColor { get; set; }
#nullable restore
#else
        public string ButtonBackgroundColor { get; set; }
#endif
        /// <summary>The logo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Logo { get; set; }
#nullable restore
#else
        public string Logo { get; set; }
#endif
        /// <summary>Name of chatbot</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The primary_color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryColor { get; set; }
#nullable restore
#else
        public string PrimaryColor { get; set; }
#endif
        /// <summary>The secondary_color property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecondaryColor { get; set; }
#nullable restore
#else
        public string SecondaryColor { get; set; }
#endif
        /// <summary>The starting_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartingMessage { get; set; }
#nullable restore
#else
        public string StartingMessage { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.ApiChatbot"/> and sets the default values.
        /// </summary>
        public ApiChatbot()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.ApiChatbot"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.ApiChatbot CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.ApiChatbot();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "button_background_color", n => { ButtonBackgroundColor = n.GetStringValue(); } },
                { "logo", n => { Logo = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "primary_color", n => { PrimaryColor = n.GetStringValue(); } },
                { "secondary_color", n => { SecondaryColor = n.GetStringValue(); } },
                { "starting_message", n => { StartingMessage = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("button_background_color", ButtonBackgroundColor);
            writer.WriteStringValue("logo", Logo);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("primary_color", PrimaryColor);
            writer.WriteStringValue("secondary_color", SecondaryColor);
            writer.WriteStringValue("starting_message", StartingMessage);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
