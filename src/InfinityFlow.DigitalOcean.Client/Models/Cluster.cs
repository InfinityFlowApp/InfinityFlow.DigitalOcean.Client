// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Cluster : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.</summary>
        public bool? AutoUpgrade { get; set; }
        /// <summary>An object specifying custom cluster autoscaler configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration? ClusterAutoscalerConfiguration { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration ClusterAutoscalerConfiguration { get; set; }
#endif
        /// <summary>The range of IP addresses for the overlay network of the Kubernetes cluster in CIDR notation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterSubnet { get; set; }
#nullable restore
#else
        public string ClusterSubnet { get; set; }
#endif
        /// <summary>An object specifying the control plane firewall for the Kubernetes cluster. Control plane firewall is in early availability (invite only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall? ControlPlaneFirewall { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall ControlPlaneFirewall { get; set; }
#endif
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The base URL of the API server on the Kubernetes master node.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Endpoint { get; private set; }
#nullable restore
#else
        public string Endpoint { get; private set; }
#endif
        /// <summary>A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.</summary>
        public bool? Ha { get; set; }
        /// <summary>A unique ID that can be used to identify and reference a Kubernetes cluster.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The public IPv4 address of the Kubernetes master node. This will not be set if high availability is configured on the cluster (v1.21+)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ipv4 { get; private set; }
#nullable restore
#else
        public string Ipv4 { get; private set; }
#endif
        /// <summary>An object specifying the maintenance window policy for the Kubernetes cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy? MaintenancePolicy { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy MaintenancePolicy { get; set; }
#endif
        /// <summary>A human-readable name for a Kubernetes cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>An object specifying the details of the worker nodes available to the Kubernetes cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Kubernetes_node_pool>? NodePools { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Kubernetes_node_pool> NodePools { get; set; }
#endif
        /// <summary>The slug identifier for the region where the Kubernetes cluster is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>A read-only boolean value indicating if a container registry is integrated with the cluster.</summary>
        public bool? RegistryEnabled { get; private set; }
        /// <summary>The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceSubnet { get; set; }
#nullable restore
#else
        public string ServiceSubnet { get; set; }
#endif
        /// <summary>An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Cluster_status? Status { get; private set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Cluster_status Status { get; private set; }
#endif
        /// <summary>A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.</summary>
        public bool? SurgeUpgrade { get; set; }
        /// <summary>An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was last updated.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. &quot;1.14&quot;), the latest version within it will be used (e.g. &quot;1.14.6-do.1&quot;); if set to &quot;latest&quot;, the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.</summary>
        public Guid? VpcUuid { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Cluster"/> and sets the default values.
        /// </summary>
        public Cluster()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Cluster"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Cluster CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Cluster();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auto_upgrade", n => { AutoUpgrade = n.GetBoolValue(); } },
                { "cluster_autoscaler_configuration", n => { ClusterAutoscalerConfiguration = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration>(global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration.CreateFromDiscriminatorValue); } },
                { "cluster_subnet", n => { ClusterSubnet = n.GetStringValue(); } },
                { "control_plane_firewall", n => { ControlPlaneFirewall = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall>(global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "endpoint", n => { Endpoint = n.GetStringValue(); } },
                { "ha", n => { Ha = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "ipv4", n => { Ipv4 = n.GetStringValue(); } },
                { "maintenance_policy", n => { MaintenancePolicy = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy>(global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "node_pools", n => { NodePools = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Kubernetes_node_pool>(global::InfinityFlow.DigitalOcean.Client.Models.Kubernetes_node_pool.CreateFromDiscriminatorValue)?.AsList(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "registry_enabled", n => { RegistryEnabled = n.GetBoolValue(); } },
                { "service_subnet", n => { ServiceSubnet = n.GetStringValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Cluster_status>(global::InfinityFlow.DigitalOcean.Client.Models.Cluster_status.CreateFromDiscriminatorValue); } },
                { "surge_upgrade", n => { SurgeUpgrade = n.GetBoolValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
                { "vpc_uuid", n => { VpcUuid = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("auto_upgrade", AutoUpgrade);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration>("cluster_autoscaler_configuration", ClusterAutoscalerConfiguration);
            writer.WriteStringValue("cluster_subnet", ClusterSubnet);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall>("control_plane_firewall", ControlPlaneFirewall);
            writer.WriteBoolValue("ha", Ha);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy>("maintenance_policy", MaintenancePolicy);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Kubernetes_node_pool>("node_pools", NodePools);
            writer.WriteStringValue("region", Region);
            writer.WriteStringValue("service_subnet", ServiceSubnet);
            writer.WriteBoolValue("surge_upgrade", SurgeUpgrade);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("version", Version);
            writer.WriteGuidValue("vpc_uuid", VpcUuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
