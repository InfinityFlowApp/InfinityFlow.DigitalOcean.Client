// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Invoice_summary : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingPeriod { get; set; }
#nullable restore
#else
        public string BillingPeriod { get; set; }
#endif
        /// <summary>The credits_and_adjustments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge? CreditsAndAdjustments { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge CreditsAndAdjustments { get; set; }
#endif
        /// <summary>ID of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceId { get; set; }
#nullable restore
#else
        public string InvoiceId { get; set; }
#endif
        /// <summary>UUID of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceUuid { get; set; }
#nullable restore
#else
        public string InvoiceUuid { get; set; }
#endif
        /// <summary>The overages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge? Overages { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge Overages { get; set; }
#endif
        /// <summary>The product_charges property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Product_usage_charges? ProductCharges { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Product_usage_charges ProductCharges { get; set; }
#endif
        /// <summary>The taxes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge? Taxes { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge Taxes { get; set; }
#endif
        /// <summary>The user_billing_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Billing_address? UserBillingAddress { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Billing_address UserBillingAddress { get; set; }
#endif
        /// <summary>Company of the DigitalOcean customer being invoiced, if set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserCompany { get; set; }
#nullable restore
#else
        public string UserCompany { get; set; }
#endif
        /// <summary>Email of the DigitalOcean customer being invoiced.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserEmail { get; set; }
#nullable restore
#else
        public string UserEmail { get; set; }
#endif
        /// <summary>Name of the DigitalOcean customer being invoiced.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Invoice_summary"/> and sets the default values.
        /// </summary>
        public Invoice_summary()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Invoice_summary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Invoice_summary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Invoice_summary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetStringValue(); } },
                { "billing_period", n => { BillingPeriod = n.GetStringValue(); } },
                { "credits_and_adjustments", n => { CreditsAndAdjustments = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge>(global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge.CreateFromDiscriminatorValue); } },
                { "invoice_id", n => { InvoiceId = n.GetStringValue(); } },
                { "invoice_uuid", n => { InvoiceUuid = n.GetStringValue(); } },
                { "overages", n => { Overages = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge>(global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge.CreateFromDiscriminatorValue); } },
                { "product_charges", n => { ProductCharges = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Product_usage_charges>(global::InfinityFlow.DigitalOcean.Client.Models.Product_usage_charges.CreateFromDiscriminatorValue); } },
                { "taxes", n => { Taxes = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge>(global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge.CreateFromDiscriminatorValue); } },
                { "user_billing_address", n => { UserBillingAddress = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Billing_address>(global::InfinityFlow.DigitalOcean.Client.Models.Billing_address.CreateFromDiscriminatorValue); } },
                { "user_company", n => { UserCompany = n.GetStringValue(); } },
                { "user_email", n => { UserEmail = n.GetStringValue(); } },
                { "user_name", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amount", Amount);
            writer.WriteStringValue("billing_period", BillingPeriod);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge>("credits_and_adjustments", CreditsAndAdjustments);
            writer.WriteStringValue("invoice_id", InvoiceId);
            writer.WriteStringValue("invoice_uuid", InvoiceUuid);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge>("overages", Overages);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Product_usage_charges>("product_charges", ProductCharges);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Simple_charge>("taxes", Taxes);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Billing_address>("user_billing_address", UserBillingAddress);
            writer.WriteStringValue("user_company", UserCompany);
            writer.WriteStringValue("user_email", UserEmail);
            writer.WriteStringValue("user_name", UserName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
