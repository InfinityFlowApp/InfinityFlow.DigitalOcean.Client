// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Supported_droplet_backup_policy : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The name of the Droplet backup plan.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The day of the week the backup will occur.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PossibleDays { get; set; }
#nullable restore
#else
        public List<string> PossibleDays { get; set; }
#endif
        /// <summary>An array of integers representing the hours of the day that a backup canstart.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? PossibleWindowStarts { get; set; }
#nullable restore
#else
        public List<int?> PossibleWindowStarts { get; set; }
#endif
        /// <summary>The number of days that a backup will be kept.</summary>
        public int? RetentionPeriodDays { get; set; }
        /// <summary>The number of hours that a backup window is open.</summary>
        public int? WindowLengthHours { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Supported_droplet_backup_policy"/> and sets the default values.
        /// </summary>
        public Supported_droplet_backup_policy()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Supported_droplet_backup_policy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Supported_droplet_backup_policy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Supported_droplet_backup_policy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "name", n => { Name = n.GetStringValue(); } },
                { "possible_days", n => { PossibleDays = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "possible_window_starts", n => { PossibleWindowStarts = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "retention_period_days", n => { RetentionPeriodDays = n.GetIntValue(); } },
                { "window_length_hours", n => { WindowLengthHours = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("possible_days", PossibleDays);
            writer.WriteCollectionOfPrimitiveValues<int?>("possible_window_starts", PossibleWindowStarts);
            writer.WriteIntValue("retention_period_days", RetentionPeriodDays);
            writer.WriteIntValue("window_length_hours", WindowLengthHours);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
