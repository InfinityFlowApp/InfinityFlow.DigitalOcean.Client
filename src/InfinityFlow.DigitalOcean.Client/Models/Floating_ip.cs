// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Floating_ip : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Droplet that the floating IP has been assigned to. When you query a floating IP, if it is assigned to a Droplet, the entire Droplet object will be returned. If it is not assigned, the value will be null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet? Droplet { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet Droplet { get; set; }
#endif
        /// <summary>The public IP address of the floating IP. It also serves as its identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ip { get; set; }
#nullable restore
#else
        public string Ip { get; set; }
#endif
        /// <summary>A boolean value indicating whether or not the floating IP has pending actions preventing new ones from being submitted.</summary>
        public bool? Locked { get; set; }
        /// <summary>The UUID of the project to which the reserved IP currently belongs.</summary>
        public Guid? ProjectId { get; set; }
        /// <summary>The region property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Region? Region { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Region Region { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Floating_ip"/> and sets the default values.
        /// </summary>
        public Floating_ip()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Floating_ip"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Floating_ip CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Floating_ip();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "droplet", n => { Droplet = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet>(global::InfinityFlow.DigitalOcean.Client.Models.Droplet.CreateFromDiscriminatorValue); } },
                { "ip", n => { Ip = n.GetStringValue(); } },
                { "locked", n => { Locked = n.GetBoolValue(); } },
                { "project_id", n => { ProjectId = n.GetGuidValue(); } },
                { "region", n => { Region = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Region>(global::InfinityFlow.DigitalOcean.Client.Models.Region.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet>("droplet", Droplet);
            writer.WriteStringValue("ip", Ip);
            writer.WriteBoolValue("locked", Locked);
            writer.WriteGuidValue("project_id", ProjectId);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Region>("region", Region);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
