// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Size : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>This is a boolean value that represents whether new Droplets can be created with this size.</summary>
        public bool? Available { get; set; }
        /// <summary>A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.</summary>
        public int? Disk { get; set; }
        /// <summary>An array of objects containing information about the disks available to Droplets created with this size.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info>? DiskInfo { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info> DiskInfo { get; set; }
#endif
        /// <summary>An object containing information about the GPU capabilities of Droplets created with this size.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info? GpuInfo { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info GpuInfo { get; set; }
#endif
        /// <summary>The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.</summary>
        public int? Memory { get; set; }
        /// <summary>This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.</summary>
        public float? PriceHourly { get; set; }
        /// <summary>This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.</summary>
        public float? PriceMonthly { get; set; }
        /// <summary>An array containing the region slugs where this size is available for Droplet creates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Regions { get; set; }
#nullable restore
#else
        public List<string> Regions { get; set; }
#endif
        /// <summary>A human-readable string that is used to uniquely identify each size.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.</summary>
        public float? Transfer { get; set; }
        /// <summary>The number of CPUs allocated to Droplets of this size.</summary>
        public int? Vcpus { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Size"/> and sets the default values.
        /// </summary>
        public Size()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Size"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Size CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Size();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available", n => { Available = n.GetBoolValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "disk", n => { Disk = n.GetIntValue(); } },
                { "disk_info", n => { DiskInfo = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info>(global::InfinityFlow.DigitalOcean.Client.Models.Disk_info.CreateFromDiscriminatorValue)?.AsList(); } },
                { "gpu_info", n => { GpuInfo = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info>(global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info.CreateFromDiscriminatorValue); } },
                { "memory", n => { Memory = n.GetIntValue(); } },
                { "price_hourly", n => { PriceHourly = n.GetFloatValue(); } },
                { "price_monthly", n => { PriceMonthly = n.GetFloatValue(); } },
                { "regions", n => { Regions = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
                { "transfer", n => { Transfer = n.GetFloatValue(); } },
                { "vcpus", n => { Vcpus = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("available", Available);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("disk", Disk);
            writer.WriteCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info>("disk_info", DiskInfo);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info>("gpu_info", GpuInfo);
            writer.WriteIntValue("memory", Memory);
            writer.WriteFloatValue("price_hourly", PriceHourly);
            writer.WriteFloatValue("price_monthly", PriceMonthly);
            writer.WriteCollectionOfPrimitiveValues<string>("regions", Regions);
            writer.WriteStringValue("slug", Slug);
            writer.WriteFloatValue("transfer", Transfer);
            writer.WriteIntValue("vcpus", Vcpus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
