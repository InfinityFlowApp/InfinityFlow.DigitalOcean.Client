// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Droplet_create : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backup_policy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_backup_policy? BackupPolicy { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_backup_policy BackupPolicy { get; set; }
#endif
        /// <summary>A boolean indicating whether automated backups should be enabled for the Droplet.</summary>
        public bool? Backups { get; set; }
        /// <summary>The image ID of a public or private image or the slug identifier for a public image. This image will be the base image for your Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image? Image { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image Image { get; set; }
#endif
        /// <summary>A boolean indicating whether to enable IPv6 on the Droplet.</summary>
        public bool? Ipv6 { get; set; }
        /// <summary>A boolean indicating whether to install the DigitalOcean agent for monitoring.</summary>
        public bool? Monitoring { get; set; }
        /// <summary>This parameter has been deprecated. Use `vpc_uuid` instead to specify a VPC network for the Droplet. If no `vpc_uuid` is provided, the Droplet will be placed in your account&apos;s default VPC for the region.</summary>
        [Obsolete("")]
        public bool? PrivateNetworking { get; set; }
        /// <summary>The slug identifier for the region that you wish to deploy the Droplet in. If the specific datacenter is not not important, a slug prefix (e.g. `nyc`) can be used to deploy the Droplet in any of the that region&apos;s locations (`nyc1`, `nyc2`, or `nyc3`). If the region is omitted from the create request completely, the Droplet may deploy in any region.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>The slug identifier for the size that you wish to select for this Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>An array containing the IDs or fingerprints of the SSH keys that you wish to embed in the Droplet&apos;s root account upon creation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SshKeys { get; set; }
#nullable restore
#else
        public List<string> SshKeys { get; set; }
#endif
        /// <summary>A flat array of tag names as strings to apply to the Droplet after it is created. Tag names can either be existing or new tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>A string containing &apos;user data&apos; which may be used to configure the Droplet on first boot, often a &apos;cloud-config&apos; file or Bash script. It must be plain text and may not exceed 64 KiB in size.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserData { get; set; }
#nullable restore
#else
        public string UserData { get; set; }
#endif
        /// <summary>An array of IDs for block storage volumes that will be attached to the Droplet once created. The volumes must not already be attached to an existing Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Volumes { get; set; }
#nullable restore
#else
        public List<string> Volumes { get; set; }
#endif
        /// <summary>A string specifying the UUID of the VPC to which the Droplet will be assigned. If excluded, the Droplet will be assigned to your account&apos;s default VPC for the region.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VpcUuid { get; set; }
#nullable restore
#else
        public string VpcUuid { get; set; }
#endif
        /// <summary>A boolean indicating whether to install the DigitalOcean agent used for providing access to the Droplet web console in the control panel. By default, the agent is installed on new Droplets but installation errors (i.e. OS not supported) are ignored. To prevent it from being installed, set to `false`. To make installation errors fatal, explicitly set it to `true`.</summary>
        public bool? WithDropletAgent { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create"/> and sets the default values.
        /// </summary>
        public Droplet_create()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backup_policy", n => { BackupPolicy = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_backup_policy>(global::InfinityFlow.DigitalOcean.Client.Models.Droplet_backup_policy.CreateFromDiscriminatorValue); } },
                { "backups", n => { Backups = n.GetBoolValue(); } },
                { "image", n => { Image = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image>(global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image.CreateFromDiscriminatorValue); } },
                { "ipv6", n => { Ipv6 = n.GetBoolValue(); } },
                { "monitoring", n => { Monitoring = n.GetBoolValue(); } },
                { "private_networking", n => { PrivateNetworking = n.GetBoolValue(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "size", n => { Size = n.GetStringValue(); } },
                { "ssh_keys", n => { SshKeys = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "user_data", n => { UserData = n.GetStringValue(); } },
                { "volumes", n => { Volumes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "vpc_uuid", n => { VpcUuid = n.GetStringValue(); } },
                { "with_droplet_agent", n => { WithDropletAgent = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_backup_policy>("backup_policy", BackupPolicy);
            writer.WriteBoolValue("backups", Backups);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image>("image", Image);
            writer.WriteBoolValue("ipv6", Ipv6);
            writer.WriteBoolValue("monitoring", Monitoring);
            writer.WriteBoolValue("private_networking", PrivateNetworking);
            writer.WriteStringValue("region", Region);
            writer.WriteStringValue("size", Size);
            writer.WriteCollectionOfPrimitiveValues<string>("ssh_keys", SshKeys);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("user_data", UserData);
            writer.WriteCollectionOfPrimitiveValues<string>("volumes", Volumes);
            writer.WriteStringValue("vpc_uuid", VpcUuid);
            writer.WriteBoolValue("with_droplet_agent", WithDropletAgent);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="int"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Droplet_create_image : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::InfinityFlow.DigitalOcean.Client.Models.Droplet_create.Droplet_create_image();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
