// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// An object specifying forwarding configurations for a Global load balancer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Glb_settings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An object specifying CDN configurations for a Global load balancer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_cdn? Cdn { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_cdn Cdn { get; set; }
#endif
        /// <summary>An integer value as a percentage to indicate failure threshold to decide how the regional priorities will take effect. A value of `50` would indicate that the Global load balancer will choose a lower priority region to forward traffic to once this failure threshold has been reached for the higher priority region.</summary>
        public int? FailoverThreshold { get; set; }
        /// <summary>A map of region string to an integer priority value indicating preference for which regional target a Global load balancer will forward traffic to. A lower value indicates a higher priority.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_region_priorities? RegionPriorities { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_region_priorities RegionPriorities { get; set; }
#endif
        /// <summary>An integer representing the port on the target backends which the load balancer will forward traffic to.</summary>
        public int? TargetPort { get; set; }
        /// <summary>The protocol used for forwarding traffic from the load balancer to the target backends. The possible values are `http`, `https` and `http2`.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_target_protocol? TargetProtocol { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings"/> and sets the default values.
        /// </summary>
        public Glb_settings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cdn", n => { Cdn = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_cdn>(global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_cdn.CreateFromDiscriminatorValue); } },
                { "failover_threshold", n => { FailoverThreshold = n.GetIntValue(); } },
                { "region_priorities", n => { RegionPriorities = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_region_priorities>(global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_region_priorities.CreateFromDiscriminatorValue); } },
                { "target_port", n => { TargetPort = n.GetIntValue(); } },
                { "target_protocol", n => { TargetProtocol = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_target_protocol>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_cdn>("cdn", Cdn);
            writer.WriteIntValue("failover_threshold", FailoverThreshold);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_region_priorities>("region_priorities", RegionPriorities);
            writer.WriteIntValue("target_port", TargetPort);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Glb_settings_target_protocol>("target_protocol", TargetProtocol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
