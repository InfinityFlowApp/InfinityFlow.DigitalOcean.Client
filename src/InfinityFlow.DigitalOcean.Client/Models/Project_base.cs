// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Project_base : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the project was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>The description of the project. The maximum length is 255 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The environment of the project&apos;s resources.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Project_base_environment? Environment { get; set; }
        /// <summary>The unique universal identifier of this project.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The human-readable name for the project. The maximum length is 175 characters and the name must be unique.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The integer id of the project owner.</summary>
        public int? OwnerId { get; private set; }
        /// <summary>The unique universal identifier of the project owner.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerUuid { get; private set; }
#nullable restore
#else
        public string OwnerUuid { get; private set; }
#endif
        /// <summary>The purpose of the project. The maximum length is 255 characters. It canhave one of the following values:- Just trying out DigitalOcean- Class project / Educational purposes- Website or blog- Web Application- Service or API- Mobile Application- Machine learning / AI / Data processing- IoT- Operational / Developer toolingIf another value for purpose is specified, for example, &quot;your custom purpose&quot;,your purpose will be stored as `Other: your custom purpose`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Purpose { get; set; }
#nullable restore
#else
        public string Purpose { get; set; }
#endif
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the project was updated.</summary>
        public DateTimeOffset? UpdatedAt { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Project_base"/> and sets the default values.
        /// </summary>
        public Project_base()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Project_base"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Project_base CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Project_base();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "environment", n => { Environment = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Project_base_environment>(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "owner_id", n => { OwnerId = n.GetIntValue(); } },
                { "owner_uuid", n => { OwnerUuid = n.GetStringValue(); } },
                { "purpose", n => { Purpose = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Project_base_environment>("environment", Environment);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("purpose", Purpose);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
