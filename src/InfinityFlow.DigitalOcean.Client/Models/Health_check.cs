// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// An object specifying health check settings for the load balancer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Health_check : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of seconds between between two consecutive health checks.</summary>
        public int? CheckIntervalSeconds { get; set; }
        /// <summary>The number of times a health check must pass for a backend Droplet to be marked &quot;healthy&quot; and be re-added to the pool.</summary>
        public int? HealthyThreshold { get; set; }
        /// <summary>The path on the backend Droplets to which the load balancer instance will send a request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>An integer representing the port on the backend Droplets on which the health check will attempt a connection.</summary>
        public int? Port { get; set; }
        /// <summary>The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https`, or `tcp`.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Health_check_protocol? Protocol { get; set; }
        /// <summary>The number of seconds the load balancer instance will wait for a response until marking a health check as failed.</summary>
        public int? ResponseTimeoutSeconds { get; set; }
        /// <summary>The number of times a health check must fail for a backend Droplet to be marked &quot;unhealthy&quot; and be removed from the pool.</summary>
        public int? UnhealthyThreshold { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Health_check"/> and sets the default values.
        /// </summary>
        public Health_check()
        {
            AdditionalData = new Dictionary<string, object>();
            Path = "/";
            Protocol = global::InfinityFlow.DigitalOcean.Client.Models.Health_check_protocol.Http;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Health_check"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Health_check CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Health_check();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "check_interval_seconds", n => { CheckIntervalSeconds = n.GetIntValue(); } },
                { "healthy_threshold", n => { HealthyThreshold = n.GetIntValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "protocol", n => { Protocol = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Health_check_protocol>(); } },
                { "response_timeout_seconds", n => { ResponseTimeoutSeconds = n.GetIntValue(); } },
                { "unhealthy_threshold", n => { UnhealthyThreshold = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("check_interval_seconds", CheckIntervalSeconds);
            writer.WriteIntValue("healthy_threshold", HealthyThreshold);
            writer.WriteStringValue("path", Path);
            writer.WriteIntValue("port", Port);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Health_check_protocol>("protocol", Protocol);
            writer.WriteIntValue("response_timeout_seconds", ResponseTimeoutSeconds);
            writer.WriteIntValue("unhealthy_threshold", UnhealthyThreshold);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
