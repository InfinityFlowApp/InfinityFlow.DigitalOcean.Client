// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Rsyslog_logsink : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>PEM encoded CA certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ca { get; set; }
#nullable restore
#else
        public string Ca { get; set; }
#endif
        /// <summary>(PEM format) client cert to use</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cert { get; set; }
#nullable restore
#else
        public string Cert { get; set; }
#endif
        /// <summary>Message format used by the server, this can be either rfc3164 (the old BSD style message format), `rfc5424` (current syslog message format) or custom</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink_format? Format { get; set; }
        /// <summary>(PEM format) client key if the server requires client authentication</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Conditional (required if `format` == `custom`).Syslog log line template for a custom format, supporting limited rsyslog style templating (using `%tag%`). Supported tags are: `HOSTNAME`, `app-name`, `msg`, `msgid`, `pri`, `procid`, `structured-data`, `timestamp` and `timestamp:::date-rfc3339`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Logline { get; set; }
#nullable restore
#else
        public string Logline { get; set; }
#endif
        /// <summary>The internal port on which the rsyslog server is listening</summary>
        public int? Port { get; set; }
        /// <summary>content of the structured data block of rfc5424 message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sd { get; set; }
#nullable restore
#else
        public string Sd { get; set; }
#endif
        /// <summary>DNS name or IPv4 address of the rsyslog server</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Server { get; set; }
#nullable restore
#else
        public string Server { get; set; }
#endif
        /// <summary>Use TLS (as the messages are not filtered and may contain sensitive information, it is highly recommended to set this to true if the remote server supports it)</summary>
        public bool? Tls { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink"/> and sets the default values.
        /// </summary>
        public Rsyslog_logsink()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ca", n => { Ca = n.GetStringValue(); } },
                { "cert", n => { Cert = n.GetStringValue(); } },
                { "format", n => { Format = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink_format>(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "logline", n => { Logline = n.GetStringValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "sd", n => { Sd = n.GetStringValue(); } },
                { "server", n => { Server = n.GetStringValue(); } },
                { "tls", n => { Tls = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ca", Ca);
            writer.WriteStringValue("cert", Cert);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Rsyslog_logsink_format>("format", Format);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("logline", Logline);
            writer.WriteIntValue("port", Port);
            writer.WriteStringValue("sd", Sd);
            writer.WriteStringValue("server", Server);
            writer.WriteBoolValue("tls", Tls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
