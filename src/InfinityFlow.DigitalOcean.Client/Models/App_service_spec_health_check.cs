// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class App_service_spec_health_check : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of failed health checks before considered unhealthy.</summary>
        public int? FailureThreshold { get; set; }
        /// <summary>The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HttpPath { get; set; }
#nullable restore
#else
        public string HttpPath { get; set; }
#endif
        /// <summary>The number of seconds to wait before beginning health checks.</summary>
        public int? InitialDelaySeconds { get; set; }
        /// <summary>The number of seconds to wait between health checks.</summary>
        public int? PeriodSeconds { get; set; }
        /// <summary>The port on which the health check will be performed. If not set, the health check will be performed on the component&apos;s http_port.</summary>
        public long? Port { get; set; }
        /// <summary>The number of successful health checks before considered healthy.</summary>
        public int? SuccessThreshold { get; set; }
        /// <summary>The number of seconds after which the check times out.</summary>
        public int? TimeoutSeconds { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_service_spec_health_check"/> and sets the default values.
        /// </summary>
        public App_service_spec_health_check()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_service_spec_health_check"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.App_service_spec_health_check CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.App_service_spec_health_check();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "failure_threshold", n => { FailureThreshold = n.GetIntValue(); } },
                { "http_path", n => { HttpPath = n.GetStringValue(); } },
                { "initial_delay_seconds", n => { InitialDelaySeconds = n.GetIntValue(); } },
                { "period_seconds", n => { PeriodSeconds = n.GetIntValue(); } },
                { "port", n => { Port = n.GetLongValue(); } },
                { "success_threshold", n => { SuccessThreshold = n.GetIntValue(); } },
                { "timeout_seconds", n => { TimeoutSeconds = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("failure_threshold", FailureThreshold);
            writer.WriteStringValue("http_path", HttpPath);
            writer.WriteIntValue("initial_delay_seconds", InitialDelaySeconds);
            writer.WriteIntValue("period_seconds", PeriodSeconds);
            writer.WriteLongValue("port", Port);
            writer.WriteIntValue("success_threshold", SuccessThreshold);
            writer.WriteIntValue("timeout_seconds", TimeoutSeconds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
