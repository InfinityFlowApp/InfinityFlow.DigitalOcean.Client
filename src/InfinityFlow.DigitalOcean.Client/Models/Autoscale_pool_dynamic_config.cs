// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Autoscale_pool_dynamic_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of minutes to wait between scaling events in an autoscale pool. Defaults to 10 minutes.</summary>
        public int? CooldownMinutes { get; set; }
        /// <summary>The maximum number of Droplets in an autoscale pool.</summary>
        public int? MaxInstances { get; set; }
        /// <summary>The minimum number of Droplets in an autoscale pool.</summary>
        public int? MinInstances { get; set; }
        /// <summary>Target CPU utilization as a decimal.</summary>
        public float? TargetCpuUtilization { get; set; }
        /// <summary>Target memory utilization as a decimal.</summary>
        public float? TargetMemoryUtilization { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Autoscale_pool_dynamic_config"/> and sets the default values.
        /// </summary>
        public Autoscale_pool_dynamic_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Autoscale_pool_dynamic_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Autoscale_pool_dynamic_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Autoscale_pool_dynamic_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cooldown_minutes", n => { CooldownMinutes = n.GetIntValue(); } },
                { "max_instances", n => { MaxInstances = n.GetIntValue(); } },
                { "min_instances", n => { MinInstances = n.GetIntValue(); } },
                { "target_cpu_utilization", n => { TargetCpuUtilization = n.GetFloatValue(); } },
                { "target_memory_utilization", n => { TargetMemoryUtilization = n.GetFloatValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("cooldown_minutes", CooldownMinutes);
            writer.WriteIntValue("max_instances", MaxInstances);
            writer.WriteIntValue("min_instances", MinInstances);
            writer.WriteFloatValue("target_cpu_utilization", TargetCpuUtilization);
            writer.WriteFloatValue("target_memory_utilization", TargetMemoryUtilization);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
