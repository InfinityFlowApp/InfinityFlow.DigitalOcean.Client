// <auto-generated/>
using System.Runtime.Serialization;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>A string specifying the desired eviction policy for the Redis cluster.- `noeviction`: Don&apos;t evict any data, returns error when memory limit is reached.- `allkeys_lru:` Evict any key, least recently used (LRU) first.- `allkeys_random`: Evict keys in a random order.- `volatile_lru`: Evict keys with expiration only, least recently used (LRU) first.- `volatile_random`: Evict keys with expiration only in a random order.- `volatile_ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public enum Eviction_policy_model
    {
        [EnumMember(Value = "noeviction")]
        #pragma warning disable CS1591
        Noeviction,
        #pragma warning restore CS1591
        [EnumMember(Value = "allkeys_lru")]
        #pragma warning disable CS1591
        Allkeys_lru,
        #pragma warning restore CS1591
        [EnumMember(Value = "allkeys_random")]
        #pragma warning disable CS1591
        Allkeys_random,
        #pragma warning restore CS1591
        [EnumMember(Value = "volatile_lru")]
        #pragma warning disable CS1591
        Volatile_lru,
        #pragma warning restore CS1591
        [EnumMember(Value = "volatile_random")]
        #pragma warning disable CS1591
        Volatile_random,
        #pragma warning restore CS1591
        [EnumMember(Value = "volatile_ttl")]
        #pragma warning disable CS1591
        Volatile_ttl,
        #pragma warning restore CS1591
    }
}
