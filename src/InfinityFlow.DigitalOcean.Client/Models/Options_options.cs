// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Options_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The kafka property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_kafka? Kafka { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_kafka Kafka { get; set; }
#endif
        /// <summary>The mongodb property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mongodb? Mongodb { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mongodb Mongodb { get; set; }
#endif
        /// <summary>The mysql property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mysql? Mysql { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mysql Mysql { get; set; }
#endif
        /// <summary>The opensearch property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_opensearch? Opensearch { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_opensearch Opensearch { get; set; }
#endif
        /// <summary>The pg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_pg? Pg { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_pg Pg { get; set; }
#endif
        /// <summary>The redis property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_redis? Redis { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Options_options_redis Redis { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Options_options"/> and sets the default values.
        /// </summary>
        public Options_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Options_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Options_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Options_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "kafka", n => { Kafka = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_kafka>(global::InfinityFlow.DigitalOcean.Client.Models.Options_options_kafka.CreateFromDiscriminatorValue); } },
                { "mongodb", n => { Mongodb = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mongodb>(global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mongodb.CreateFromDiscriminatorValue); } },
                { "mysql", n => { Mysql = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mysql>(global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mysql.CreateFromDiscriminatorValue); } },
                { "opensearch", n => { Opensearch = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_opensearch>(global::InfinityFlow.DigitalOcean.Client.Models.Options_options_opensearch.CreateFromDiscriminatorValue); } },
                { "pg", n => { Pg = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_pg>(global::InfinityFlow.DigitalOcean.Client.Models.Options_options_pg.CreateFromDiscriminatorValue); } },
                { "redis", n => { Redis = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_redis>(global::InfinityFlow.DigitalOcean.Client.Models.Options_options_redis.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_kafka>("kafka", Kafka);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mongodb>("mongodb", Mongodb);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_mysql>("mysql", Mysql);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_opensearch>("opensearch", Opensearch);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_pg>("pg", Pg);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Options_options_redis>("redis", Redis);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
