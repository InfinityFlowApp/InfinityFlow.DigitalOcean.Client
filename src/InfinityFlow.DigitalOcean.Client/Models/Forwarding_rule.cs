// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// An object specifying a forwarding rule for a load balancer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Forwarding_rule : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the TLS certificate used for SSL termination if enabled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateId { get; set; }
#nullable restore
#else
        public string CertificateId { get; set; }
#endif
        /// <summary>An integer representing the port on which the load balancer instance will listen.</summary>
        public int? EntryPort { get; set; }
        /// <summary>The protocol used for traffic to the load balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`. If you set the  `entry_protocol` to `udp`, the `target_protocol` must be set to `udp`.  When using UDP, the load balancer requires that you set up a health  check with a port that uses TCP, HTTP, or HTTPS to work properly.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule_entry_protocol? EntryProtocol { get; set; }
        /// <summary>An integer representing the port on the backend Droplets to which the load balancer will send traffic.</summary>
        public int? TargetPort { get; set; }
        /// <summary>The protocol used for traffic from the load balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`. If you set the `target_protocol` to `udp`, the `entry_protocol` must be set to  `udp`. When using UDP, the load balancer requires that you set up a health  check with a port that uses TCP, HTTP, or HTTPS to work properly.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule_target_protocol? TargetProtocol { get; set; }
        /// <summary>A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets.</summary>
        public bool? TlsPassthrough { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule"/> and sets the default values.
        /// </summary>
        public Forwarding_rule()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "certificate_id", n => { CertificateId = n.GetStringValue(); } },
                { "entry_port", n => { EntryPort = n.GetIntValue(); } },
                { "entry_protocol", n => { EntryProtocol = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule_entry_protocol>(); } },
                { "target_port", n => { TargetPort = n.GetIntValue(); } },
                { "target_protocol", n => { TargetProtocol = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule_target_protocol>(); } },
                { "tls_passthrough", n => { TlsPassthrough = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("certificate_id", CertificateId);
            writer.WriteIntValue("entry_port", EntryPort);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule_entry_protocol>("entry_protocol", EntryProtocol);
            writer.WriteIntValue("target_port", TargetPort);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Forwarding_rule_target_protocol>("target_protocol", TargetProtocol);
            writer.WriteBoolValue("tls_passthrough", TlsPassthrough);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
