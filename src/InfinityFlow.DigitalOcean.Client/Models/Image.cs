// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Image : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the image was created.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>An optional free-form text field to describe an image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name of a custom image&apos;s distribution. Currently, the valid values are  `Arch Linux`, `CentOS`, `CoreOS`, `Debian`, `Fedora`, `Fedora Atomic`,  `FreeBSD`, `Gentoo`, `openSUSE`, `RancherOS`, `Rocky Linux`, `Ubuntu`, and `Unknown`.  Any other value will be accepted but ignored, and `Unknown` will be used in its place.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Distribution? Distribution { get; set; }
        /// <summary>A string containing information about errors that may occur when importing a custom image.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorMessage { get; set; }
#nullable restore
#else
        public string ErrorMessage { get; set; }
#endif
        /// <summary>A unique number that can be used to identify and reference a specific image.</summary>
        public int? Id { get; private set; }
        /// <summary>The minimum disk size in GB required for a Droplet to use this image.</summary>
        public int? MinDiskSize { get; set; }
        /// <summary>The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.</summary>
        public bool? Public { get; set; }
        /// <summary>This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Region_slug?>? Regions { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Region_slug?> Regions { get; set; }
#endif
        /// <summary>The size of the image in gigabytes.</summary>
        public float? SizeGigabytes { get; set; }
        /// <summary>A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>A status string indicating the state of a custom image. This may be `NEW`, `available`, `pending`, `deleted`, or `retired`.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Image_status? Status { get; set; }
        /// <summary>A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Image_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Image"/> and sets the default values.
        /// </summary>
        public Image()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Image"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Image CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Image();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "distribution", n => { Distribution = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Distribution>(); } },
                { "error_message", n => { ErrorMessage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "min_disk_size", n => { MinDiskSize = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "public", n => { Public = n.GetBoolValue(); } },
                { "regions", n => { Regions = n.GetCollectionOfEnumValues<global::InfinityFlow.DigitalOcean.Client.Models.Region_slug>()?.AsList(); } },
                { "size_gigabytes", n => { SizeGigabytes = n.GetFloatValue(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Image_status>(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Image_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Distribution>("distribution", Distribution);
            writer.WriteStringValue("error_message", ErrorMessage);
            writer.WriteIntValue("min_disk_size", MinDiskSize);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("public", Public);
            writer.WriteCollectionOfEnumValues<global::InfinityFlow.DigitalOcean.Client.Models.Region_slug>("regions", Regions);
            writer.WriteFloatValue("size_gigabytes", SizeGigabytes);
            writer.WriteStringValue("slug", Slug);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Image_status>("status", Status);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Image_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
