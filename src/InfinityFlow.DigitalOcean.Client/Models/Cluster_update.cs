// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Cluster_update : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.</summary>
        public bool? AutoUpgrade { get; set; }
        /// <summary>An object specifying custom cluster autoscaler configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration? ClusterAutoscalerConfiguration { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration ClusterAutoscalerConfiguration { get; set; }
#endif
        /// <summary>An object specifying the control plane firewall for the Kubernetes cluster. Control plane firewall is in early availability (invite only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall? ControlPlaneFirewall { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall ControlPlaneFirewall { get; set; }
#endif
        /// <summary>A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime. The property cannot be disabled.</summary>
        public bool? Ha { get; set; }
        /// <summary>An object specifying the maintenance window policy for the Kubernetes cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy? MaintenancePolicy { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy MaintenancePolicy { get; set; }
#endif
        /// <summary>A human-readable name for a Kubernetes cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.</summary>
        public bool? SurgeUpgrade { get; set; }
        /// <summary>An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Cluster_update"/> and sets the default values.
        /// </summary>
        public Cluster_update()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Cluster_update"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Cluster_update CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Cluster_update();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auto_upgrade", n => { AutoUpgrade = n.GetBoolValue(); } },
                { "cluster_autoscaler_configuration", n => { ClusterAutoscalerConfiguration = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration>(global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration.CreateFromDiscriminatorValue); } },
                { "control_plane_firewall", n => { ControlPlaneFirewall = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall>(global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall.CreateFromDiscriminatorValue); } },
                { "ha", n => { Ha = n.GetBoolValue(); } },
                { "maintenance_policy", n => { MaintenancePolicy = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy>(global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "surge_upgrade", n => { SurgeUpgrade = n.GetBoolValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("auto_upgrade", AutoUpgrade);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Cluster_autoscaler_configuration>("cluster_autoscaler_configuration", ClusterAutoscalerConfiguration);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Control_plane_firewall>("control_plane_firewall", ControlPlaneFirewall);
            writer.WriteBoolValue("ha", Ha);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Maintenance_policy>("maintenance_policy", MaintenancePolicy);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("surge_upgrade", SurgeUpgrade);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
