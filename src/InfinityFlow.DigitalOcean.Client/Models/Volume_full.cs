// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Volume_full : global::InfinityFlow.DigitalOcean.Client.Models.Volume_base, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The label currently applied to the filesystem.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilesystemLabel { get; set; }
#nullable restore
#else
        public string FilesystemLabel { get; set; }
#endif
        /// <summary>The type of filesystem currently in-use on the volume.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilesystemType { get; set; }
#nullable restore
#else
        public string FilesystemType { get; set; }
#endif
        /// <summary>The region property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Region? Region { get; private set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Region Region { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Volume_full"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::InfinityFlow.DigitalOcean.Client.Models.Volume_full CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Volume_full();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "filesystem_label", n => { FilesystemLabel = n.GetStringValue(); } },
                { "filesystem_type", n => { FilesystemType = n.GetStringValue(); } },
                { "region", n => { Region = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Region>(global::InfinityFlow.DigitalOcean.Client.Models.Region.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("filesystem_label", FilesystemLabel);
            writer.WriteStringValue("filesystem_type", FilesystemType);
        }
    }
}
#pragma warning restore CS0618
