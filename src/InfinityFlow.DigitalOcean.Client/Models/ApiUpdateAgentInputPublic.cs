// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// Data to modify an existing Agent
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiUpdateAgentInputPublic : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Optional anthropic key uuid for use with anthropic models</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AnthropicKeyUuid { get; set; }
#nullable restore
#else
        public string AnthropicKeyUuid { get; set; }
#endif
        /// <summary>Agent description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Agent instruction. Instructions help your agent to perform its job effectively. See [Write Effective Agent Instructions](https://docs.digitalocean.com/products/genai-platform/concepts/best-practices/#agent-instructions) for best practices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Instruction { get; set; }
#nullable restore
#else
        public string Instruction { get; set; }
#endif
        /// <summary>How many results should be considered from an attached knowledge base</summary>
        public long? K { get; set; }
        /// <summary>Specifies the maximum number of tokens the model can process in a single input or output, set as a number between 1 and 512. This determines the length of each response.</summary>
        public long? MaxTokens { get; set; }
        /// <summary>Identifier for the foundation model.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelUuid { get; set; }
#nullable restore
#else
        public string ModelUuid { get; set; }
#endif
        /// <summary>Agent name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The id of the DigitalOcean project this agent will belong to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>A set of abitrary tags to organize your agent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>Controls the modelâ€™s creativity, specified as a number between 0 and 1. Lower values produce more predictable and conservative responses, while higher values encourage creativity and variation.</summary>
        public float? Temperature { get; set; }
        /// <summary>Defines the cumulative probability threshold for word selection, specified as a number between 0 and 1. Higher values allow for more diverse outputs, while lower values ensure focused and coherent responses.</summary>
        public float? TopP { get; set; }
        /// <summary>Unique agent id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.ApiUpdateAgentInputPublic"/> and sets the default values.
        /// </summary>
        public ApiUpdateAgentInputPublic()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.ApiUpdateAgentInputPublic"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.ApiUpdateAgentInputPublic CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.ApiUpdateAgentInputPublic();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "anthropic_key_uuid", n => { AnthropicKeyUuid = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "instruction", n => { Instruction = n.GetStringValue(); } },
                { "k", n => { K = n.GetLongValue(); } },
                { "max_tokens", n => { MaxTokens = n.GetLongValue(); } },
                { "model_uuid", n => { ModelUuid = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "project_id", n => { ProjectId = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "temperature", n => { Temperature = n.GetFloatValue(); } },
                { "top_p", n => { TopP = n.GetFloatValue(); } },
                { "uuid", n => { Uuid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("anthropic_key_uuid", AnthropicKeyUuid);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("instruction", Instruction);
            writer.WriteLongValue("k", K);
            writer.WriteLongValue("max_tokens", MaxTokens);
            writer.WriteStringValue("model_uuid", ModelUuid);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("project_id", ProjectId);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteFloatValue("temperature", Temperature);
            writer.WriteFloatValue("top_p", TopP);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
