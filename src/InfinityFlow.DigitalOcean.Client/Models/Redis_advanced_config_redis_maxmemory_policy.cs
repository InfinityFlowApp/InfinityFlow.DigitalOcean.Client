// <auto-generated/>
using System.Runtime.Serialization;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>A string specifying the desired eviction policy for the Redis cluster.- `noeviction`: Don&apos;t evict any data, returns error when memory limit is reached.- `allkeys-lru:` Evict any key, least recently used (LRU) first.- `allkeys-random`: Evict keys in a random order.- `volatile-lru`: Evict keys with expiration only, least recently used (LRU) first.- `volatile-random`: Evict keys with expiration only in a random order.- `volatile-ttl`: Evict keys with expiration only, shortest time-to-live (TTL) first.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public enum Redis_advanced_config_redis_maxmemory_policy
    {
        [EnumMember(Value = "noeviction")]
        #pragma warning disable CS1591
        Noeviction,
        #pragma warning restore CS1591
        [EnumMember(Value = "allkeys-lru")]
        #pragma warning disable CS1591
        AllkeysLru,
        #pragma warning restore CS1591
        [EnumMember(Value = "allkeys-random")]
        #pragma warning disable CS1591
        AllkeysRandom,
        #pragma warning restore CS1591
        [EnumMember(Value = "volatile-lru")]
        #pragma warning disable CS1591
        VolatileLru,
        #pragma warning restore CS1591
        [EnumMember(Value = "volatile-random")]
        #pragma warning disable CS1591
        VolatileRandom,
        #pragma warning restore CS1591
        [EnumMember(Value = "volatile-ttl")]
        #pragma warning disable CS1591
        VolatileTtl,
        #pragma warning restore CS1591
    }
}
