// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Mysql_advanced_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.</summary>
        public int? BackupHour { get; set; }
        /// <summary>The minute of the backup hour when backup for the service starts. New backup  only starts if previous backup has already completed.</summary>
        public int? BackupMinute { get; set; }
        /// <summary>The minimum amount of time, in seconds, to keep binlog entries before deletion.  This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.</summary>
        public double? BinlogRetentionPeriod { get; set; }
        /// <summary>The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.</summary>
        public int? ConnectTimeout { get; set; }
        /// <summary>Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or &apos;SYSTEM&apos; to use the MySQL server default.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultTimeZone { get; set; }
#nullable restore
#else
        public string DefaultTimeZone { get; set; }
#endif
        /// <summary>The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.</summary>
        public int? GroupConcatMaxLen { get; set; }
        /// <summary>The time, in seconds, before cached statistics expire.</summary>
        public int? InformationSchemaStatsExpiry { get; set; }
        /// <summary>Specifies the maximum size of the InnoDB change buffer as a percentage of the buffer pool.</summary>
        public int? InnodbChangeBufferMaxSize { get; set; }
        /// <summary>Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent.  - 0 &amp;mdash; disables this functionality, dirty pages in the same extent are not flushed.  - 1 &amp;mdash; flushes contiguous dirty pages in the same extent.  - 2 &amp;mdash; flushes dirty pages in the same extent.</summary>
        public int? InnodbFlushNeighbors { get; set; }
        /// <summary>The minimum length of words that an InnoDB FULLTEXT index stores.</summary>
        public int? InnodbFtMinTokenSize { get; set; }
        /// <summary>The InnoDB FULLTEXT index stopword list for all InnoDB tables.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InnodbFtServerStopwordTable { get; set; }
#nullable restore
#else
        public string InnodbFtServerStopwordTable { get; set; }
#endif
        /// <summary>The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.</summary>
        public int? InnodbLockWaitTimeout { get; set; }
        /// <summary>The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.</summary>
        public int? InnodbLogBufferSize { get; set; }
        /// <summary>The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.</summary>
        public int? InnodbOnlineAlterLogMaxSize { get; set; }
        /// <summary>When enabled, records information about all deadlocks in InnoDB user transactions  in the error log. Disabled by default.</summary>
        public bool? InnodbPrintAllDeadlocks { get; set; }
        /// <summary>The number of I/O threads for read operations in InnoDB. Changing this parameter will lead to a restart of the MySQL service.</summary>
        public int? InnodbReadIoThreads { get; set; }
        /// <summary>When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.</summary>
        public bool? InnodbRollbackOnTimeout { get; set; }
        /// <summary>Defines the maximum number of threads permitted inside of InnoDB. A value of 0 (the default) is interpreted as infinite concurrency (no limit). This variable is intended for performance  tuning on high concurrency systems.</summary>
        public int? InnodbThreadConcurrency { get; set; }
        /// <summary>The number of I/O threads for write operations in InnoDB. Changing this parameter will lead to a restart of the MySQL service.</summary>
        public int? InnodbWriteIoThreads { get; set; }
        /// <summary>The time, in seconds, the server waits for activity on an interactive. connection before closing it.</summary>
        public int? InteractiveTimeout { get; set; }
        /// <summary>The storage engine for in-memory internal temporary tables.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_internal_tmp_mem_storage_engine? InternalTmpMemStorageEngine { get; set; }
        /// <summary>Defines the destination for logs. Can be `INSIGHTS`, `TABLE`, or both (`INSIGHTS,TABLE`), or `NONE` to disable logs. To specify both destinations, use `INSIGHTS,TABLE` (order matters). Default is NONE.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_log_output? LogOutput { get; set; }
        /// <summary>The time, in seconds, for a query to take to execute before  being captured by slow_query_logs. Default is 10 seconds.</summary>
        public double? LongQueryTime { get; set; }
        /// <summary>The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).</summary>
        public int? MaxAllowedPacket { get; set; }
        /// <summary>The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)</summary>
        public int? MaxHeapTableSize { get; set; }
        /// <summary>Start sizes of connection buffer and result buffer, must be multiple of 1024. Changing this parameter will lead to a restart of the MySQL service.</summary>
        public int? NetBufferLength { get; set; }
        /// <summary>The time, in seconds, to wait for more data from an existing connection. aborting the read.</summary>
        public int? NetReadTimeout { get; set; }
        /// <summary>The number of seconds to wait for a block to be written to a connection before aborting the write.</summary>
        public int? NetWriteTimeout { get; set; }
        /// <summary>When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.</summary>
        public bool? SlowQueryLog { get; set; }
        /// <summary>The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).</summary>
        public int? SortBufferSize { get; set; }
        /// <summary>Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SqlMode { get; set; }
#nullable restore
#else
        public string SqlMode { get; set; }
#endif
        /// <summary>Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.</summary>
        public bool? SqlRequirePrimaryKey { get; set; }
        /// <summary>The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).</summary>
        public int? TmpTableSize { get; set; }
        /// <summary>The number of seconds the server waits for activity on a noninteractive connection before closing it.</summary>
        public int? WaitTimeout { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config"/> and sets the default values.
        /// </summary>
        public Mysql_advanced_config()
        {
            AdditionalData = new Dictionary<string, object>();
            LogOutput = global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_log_output.NONE;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backup_hour", n => { BackupHour = n.GetIntValue(); } },
                { "backup_minute", n => { BackupMinute = n.GetIntValue(); } },
                { "binlog_retention_period", n => { BinlogRetentionPeriod = n.GetDoubleValue(); } },
                { "connect_timeout", n => { ConnectTimeout = n.GetIntValue(); } },
                { "default_time_zone", n => { DefaultTimeZone = n.GetStringValue(); } },
                { "group_concat_max_len", n => { GroupConcatMaxLen = n.GetIntValue(); } },
                { "information_schema_stats_expiry", n => { InformationSchemaStatsExpiry = n.GetIntValue(); } },
                { "innodb_change_buffer_max_size", n => { InnodbChangeBufferMaxSize = n.GetIntValue(); } },
                { "innodb_flush_neighbors", n => { InnodbFlushNeighbors = n.GetIntValue(); } },
                { "innodb_ft_min_token_size", n => { InnodbFtMinTokenSize = n.GetIntValue(); } },
                { "innodb_ft_server_stopword_table", n => { InnodbFtServerStopwordTable = n.GetStringValue(); } },
                { "innodb_lock_wait_timeout", n => { InnodbLockWaitTimeout = n.GetIntValue(); } },
                { "innodb_log_buffer_size", n => { InnodbLogBufferSize = n.GetIntValue(); } },
                { "innodb_online_alter_log_max_size", n => { InnodbOnlineAlterLogMaxSize = n.GetIntValue(); } },
                { "innodb_print_all_deadlocks", n => { InnodbPrintAllDeadlocks = n.GetBoolValue(); } },
                { "innodb_read_io_threads", n => { InnodbReadIoThreads = n.GetIntValue(); } },
                { "innodb_rollback_on_timeout", n => { InnodbRollbackOnTimeout = n.GetBoolValue(); } },
                { "innodb_thread_concurrency", n => { InnodbThreadConcurrency = n.GetIntValue(); } },
                { "innodb_write_io_threads", n => { InnodbWriteIoThreads = n.GetIntValue(); } },
                { "interactive_timeout", n => { InteractiveTimeout = n.GetIntValue(); } },
                { "internal_tmp_mem_storage_engine", n => { InternalTmpMemStorageEngine = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_internal_tmp_mem_storage_engine>(); } },
                { "log_output", n => { LogOutput = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_log_output>(); } },
                { "long_query_time", n => { LongQueryTime = n.GetDoubleValue(); } },
                { "max_allowed_packet", n => { MaxAllowedPacket = n.GetIntValue(); } },
                { "max_heap_table_size", n => { MaxHeapTableSize = n.GetIntValue(); } },
                { "net_buffer_length", n => { NetBufferLength = n.GetIntValue(); } },
                { "net_read_timeout", n => { NetReadTimeout = n.GetIntValue(); } },
                { "net_write_timeout", n => { NetWriteTimeout = n.GetIntValue(); } },
                { "slow_query_log", n => { SlowQueryLog = n.GetBoolValue(); } },
                { "sort_buffer_size", n => { SortBufferSize = n.GetIntValue(); } },
                { "sql_mode", n => { SqlMode = n.GetStringValue(); } },
                { "sql_require_primary_key", n => { SqlRequirePrimaryKey = n.GetBoolValue(); } },
                { "tmp_table_size", n => { TmpTableSize = n.GetIntValue(); } },
                { "wait_timeout", n => { WaitTimeout = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("backup_hour", BackupHour);
            writer.WriteIntValue("backup_minute", BackupMinute);
            writer.WriteDoubleValue("binlog_retention_period", BinlogRetentionPeriod);
            writer.WriteIntValue("connect_timeout", ConnectTimeout);
            writer.WriteStringValue("default_time_zone", DefaultTimeZone);
            writer.WriteIntValue("group_concat_max_len", GroupConcatMaxLen);
            writer.WriteIntValue("information_schema_stats_expiry", InformationSchemaStatsExpiry);
            writer.WriteIntValue("innodb_change_buffer_max_size", InnodbChangeBufferMaxSize);
            writer.WriteIntValue("innodb_flush_neighbors", InnodbFlushNeighbors);
            writer.WriteIntValue("innodb_ft_min_token_size", InnodbFtMinTokenSize);
            writer.WriteStringValue("innodb_ft_server_stopword_table", InnodbFtServerStopwordTable);
            writer.WriteIntValue("innodb_lock_wait_timeout", InnodbLockWaitTimeout);
            writer.WriteIntValue("innodb_log_buffer_size", InnodbLogBufferSize);
            writer.WriteIntValue("innodb_online_alter_log_max_size", InnodbOnlineAlterLogMaxSize);
            writer.WriteBoolValue("innodb_print_all_deadlocks", InnodbPrintAllDeadlocks);
            writer.WriteIntValue("innodb_read_io_threads", InnodbReadIoThreads);
            writer.WriteBoolValue("innodb_rollback_on_timeout", InnodbRollbackOnTimeout);
            writer.WriteIntValue("innodb_thread_concurrency", InnodbThreadConcurrency);
            writer.WriteIntValue("innodb_write_io_threads", InnodbWriteIoThreads);
            writer.WriteIntValue("interactive_timeout", InteractiveTimeout);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_internal_tmp_mem_storage_engine>("internal_tmp_mem_storage_engine", InternalTmpMemStorageEngine);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Mysql_advanced_config_log_output>("log_output", LogOutput);
            writer.WriteDoubleValue("long_query_time", LongQueryTime);
            writer.WriteIntValue("max_allowed_packet", MaxAllowedPacket);
            writer.WriteIntValue("max_heap_table_size", MaxHeapTableSize);
            writer.WriteIntValue("net_buffer_length", NetBufferLength);
            writer.WriteIntValue("net_read_timeout", NetReadTimeout);
            writer.WriteIntValue("net_write_timeout", NetWriteTimeout);
            writer.WriteBoolValue("slow_query_log", SlowQueryLog);
            writer.WriteIntValue("sort_buffer_size", SortBufferSize);
            writer.WriteStringValue("sql_mode", SqlMode);
            writer.WriteBoolValue("sql_require_primary_key", SqlRequirePrimaryKey);
            writer.WriteIntValue("tmp_table_size", TmpTableSize);
            writer.WriteIntValue("wait_timeout", WaitTimeout);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
