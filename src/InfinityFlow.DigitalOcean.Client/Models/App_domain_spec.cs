// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class App_domain_spec : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The hostname for the domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; set; }
#nullable restore
#else
        public string Domain { get; set; }
#endif
        /// <summary>The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `&quot;1.2&quot;` or `&quot;1.3&quot;`.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_minimum_tls_version? MinimumTlsVersion { get; set; }
        /// <summary>- DEFAULT: The default `.ondigitalocean.app` domain assigned to this app- PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app&apos;s live URL. Only one domain may be set as primary.- ALIAS: A non-primary domain</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_type? Type { get; set; }
        /// <summary>Indicates whether the domain includes all sub-domains, in addition to the given domain</summary>
        public bool? Wildcard { get; set; }
        /// <summary>Optional. If the domain uses DigitalOcean DNS and you would like AppPlatform to automatically manage it for you, set this to the name of thedomain on your account.For example, If the domain you are adding is `app.domain.com`, the zonecould be `domain.com`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zone { get; set; }
#nullable restore
#else
        public string Zone { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec"/> and sets the default values.
        /// </summary>
        public App_domain_spec()
        {
            AdditionalData = new Dictionary<string, object>();
            Type = global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_type.UNSPECIFIED;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "minimum_tls_version", n => { MinimumTlsVersion = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_minimum_tls_version>(); } },
                { "type", n => { Type = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_type>(); } },
                { "wildcard", n => { Wildcard = n.GetBoolValue(); } },
                { "zone", n => { Zone = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("domain", Domain);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_minimum_tls_version>("minimum_tls_version", MinimumTlsVersion);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.App_domain_spec_type>("type", Type);
            writer.WriteBoolValue("wildcard", Wildcard);
            writer.WriteStringValue("zone", Zone);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
