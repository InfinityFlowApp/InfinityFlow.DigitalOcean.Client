// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// IndexingJob description
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiIndexingJob : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of datasources indexed completed</summary>
        public long? CompletedDatasources { get; set; }
        /// <summary>Creation date / time</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The data_source_uuids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DataSourceUuids { get; set; }
#nullable restore
#else
        public List<string> DataSourceUuids { get; set; }
#endif
        /// <summary>The finished_at property</summary>
        public DateTimeOffset? FinishedAt { get; set; }
        /// <summary>Knowledge base id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KnowledgeBaseUuid { get; set; }
#nullable restore
#else
        public string KnowledgeBaseUuid { get; set; }
#endif
        /// <summary>The phase property</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.ApiBatchJobPhase? Phase { get; set; }
        /// <summary>The started_at property</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>Number of tokens</summary>
        public long? Tokens { get; set; }
        /// <summary>Number of datasources being indexed</summary>
        public long? TotalDatasources { get; set; }
        /// <summary>Last modified</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Unique id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.ApiIndexingJob"/> and sets the default values.
        /// </summary>
        public ApiIndexingJob()
        {
            AdditionalData = new Dictionary<string, object>();
            Phase = global::InfinityFlow.DigitalOcean.Client.Models.ApiBatchJobPhase.BATCH_JOB_PHASE_UNKNOWN;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.ApiIndexingJob"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.ApiIndexingJob CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.ApiIndexingJob();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "completed_datasources", n => { CompletedDatasources = n.GetLongValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "data_source_uuids", n => { DataSourceUuids = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "finished_at", n => { FinishedAt = n.GetDateTimeOffsetValue(); } },
                { "knowledge_base_uuid", n => { KnowledgeBaseUuid = n.GetStringValue(); } },
                { "phase", n => { Phase = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.ApiBatchJobPhase>(); } },
                { "started_at", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "tokens", n => { Tokens = n.GetLongValue(); } },
                { "total_datasources", n => { TotalDatasources = n.GetLongValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "uuid", n => { Uuid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("completed_datasources", CompletedDatasources);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteCollectionOfPrimitiveValues<string>("data_source_uuids", DataSourceUuids);
            writer.WriteDateTimeOffsetValue("finished_at", FinishedAt);
            writer.WriteStringValue("knowledge_base_uuid", KnowledgeBaseUuid);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.ApiBatchJobPhase>("phase", Phase);
            writer.WriteDateTimeOffsetValue("started_at", StartedAt);
            writer.WriteLongValue("tokens", Tokens);
            writer.WriteLongValue("total_datasources", TotalDatasources);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
