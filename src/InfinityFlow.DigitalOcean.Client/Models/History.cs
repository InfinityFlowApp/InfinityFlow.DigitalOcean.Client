// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class History : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The creation time of the history event in ISO8601 combined date and time format.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The current number of Droplets in the autoscale pool.</summary>
        public int? CurrentInstanceCount { get; set; }
        /// <summary>The target number of Droplets for the autoscale pool after the scaling event.</summary>
        public int? DesiredInstanceCount { get; set; }
        /// <summary>The unique identifier of the history event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HistoryEventId { get; set; }
#nullable restore
#else
        public string HistoryEventId { get; set; }
#endif
        /// <summary>The reason for the scaling event.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.History_reason? Reason { get; set; }
        /// <summary>The status of the scaling event.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.History_status? Status { get; set; }
        /// <summary>The last updated time of the history event in ISO8601 combined date and time format.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.History"/> and sets the default values.
        /// </summary>
        public History()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.History"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.History CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.History();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "current_instance_count", n => { CurrentInstanceCount = n.GetIntValue(); } },
                { "desired_instance_count", n => { DesiredInstanceCount = n.GetIntValue(); } },
                { "history_event_id", n => { HistoryEventId = n.GetStringValue(); } },
                { "reason", n => { Reason = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.History_reason>(); } },
                { "status", n => { Status = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.History_status>(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteIntValue("current_instance_count", CurrentInstanceCount);
            writer.WriteIntValue("desired_instance_count", DesiredInstanceCount);
            writer.WriteStringValue("history_event_id", HistoryEventId);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.History_reason>("reason", Reason);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.History_status>("status", Status);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
