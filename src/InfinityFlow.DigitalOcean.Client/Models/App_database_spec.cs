// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class App_database_spec : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterName { get; set; }
#nullable restore
#else
        public string ClusterName { get; set; }
#endif
        /// <summary>The name of the MySQL or PostgreSQL database to configure.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DbName { get; set; }
#nullable restore
#else
        public string DbName { get; set; }
#endif
        /// <summary>The name of the MySQL or PostgreSQL user to configure.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DbUser { get; set; }
#nullable restore
#else
        public string DbUser { get; set; }
#endif
        /// <summary>- MYSQL: MySQL- PG: PostgreSQL- REDIS: Redis- MONGODB: MongoDB- KAFKA: Kafka- OPENSEARCH: OpenSearch</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec_engine? Engine { get; set; }
        /// <summary>The database&apos;s name. The name must be unique across all components within the same app and cannot use capital letters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Whether this is a production or dev database.</summary>
        public bool? Production { get; set; }
        /// <summary>The version of the database engine</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec"/> and sets the default values.
        /// </summary>
        public App_database_spec()
        {
            AdditionalData = new Dictionary<string, object>();
            Engine = global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec_engine.UNSET;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cluster_name", n => { ClusterName = n.GetStringValue(); } },
                { "db_name", n => { DbName = n.GetStringValue(); } },
                { "db_user", n => { DbUser = n.GetStringValue(); } },
                { "engine", n => { Engine = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec_engine>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "production", n => { Production = n.GetBoolValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("cluster_name", ClusterName);
            writer.WriteStringValue("db_name", DbName);
            writer.WriteStringValue("db_user", DbUser);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.App_database_spec_engine>("engine", Engine);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("production", Production);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
