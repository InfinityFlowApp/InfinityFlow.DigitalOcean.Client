// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Kafka_topic_partition : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The consumer_groups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition_consumer_groups>? ConsumerGroups { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition_consumer_groups> ConsumerGroups { get; set; }
#endif
        /// <summary>The earliest consumer offset amongst consumer groups.</summary>
        public int? EarliestOffset { get; set; }
        /// <summary>An identifier for the partition.</summary>
        public int? Id { get; set; }
        /// <summary>The number of nodes that are in-sync (have the latest data) for the given partition</summary>
        public int? InSyncReplicas { get; set; }
        /// <summary>Size of the topic partition in bytes.</summary>
        public int? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition"/> and sets the default values.
        /// </summary>
        public Kafka_topic_partition()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "consumer_groups", n => { ConsumerGroups = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition_consumer_groups>(global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition_consumer_groups.CreateFromDiscriminatorValue)?.AsList(); } },
                { "earliest_offset", n => { EarliestOffset = n.GetIntValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "in_sync_replicas", n => { InSyncReplicas = n.GetIntValue(); } },
                { "size", n => { Size = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Kafka_topic_partition_consumer_groups>("consumer_groups", ConsumerGroups);
            writer.WriteIntValue("earliest_offset", EarliestOffset);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("in_sync_replicas", InSyncReplicas);
            writer.WriteIntValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
