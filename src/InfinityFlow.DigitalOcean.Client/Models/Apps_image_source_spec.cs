// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Apps_image_source_spec : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The deploy_on_push property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_deploy_on_push? DeployOnPush { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_deploy_on_push DeployOnPush { get; set; }
#endif
        /// <summary>The image digest. Cannot be specified if tag is provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Digest { get; set; }
#nullable restore
#else
        public string Digest { get; set; }
#endif
        /// <summary>The registry name. Must be left empty for the `DOCR` registry type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Registry { get; set; }
#nullable restore
#else
        public string Registry { get; set; }
#endif
        /// <summary>The credentials to be able to pull the image. The value will be encrypted on first submission. On following submissions, the encrypted value should be used.- &quot;$username:$access_token&quot; for registries of type `DOCKER_HUB`.- &quot;$username:$access_token&quot; for registries of type `GHCR`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RegistryCredentials { get; set; }
#nullable restore
#else
        public string RegistryCredentials { get; set; }
#endif
        /// <summary>- DOCKER_HUB: The DockerHub container registry type.- DOCR: The DigitalOcean container registry type.- GHCR: The Github container registry type.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_registry_type? RegistryType { get; set; }
        /// <summary>The repository name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Repository { get; set; }
#nullable restore
#else
        public string Repository { get; set; }
#endif
        /// <summary>The repository tag. Defaults to `latest` if not provided and no digest is provided. Cannot be specified if digest is provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tag { get; set; }
#nullable restore
#else
        public string Tag { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec"/> and sets the default values.
        /// </summary>
        public Apps_image_source_spec()
        {
            AdditionalData = new Dictionary<string, object>();
            Tag = "latest";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "deploy_on_push", n => { DeployOnPush = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_deploy_on_push>(global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_deploy_on_push.CreateFromDiscriminatorValue); } },
                { "digest", n => { Digest = n.GetStringValue(); } },
                { "registry", n => { Registry = n.GetStringValue(); } },
                { "registry_credentials", n => { RegistryCredentials = n.GetStringValue(); } },
                { "registry_type", n => { RegistryType = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_registry_type>(); } },
                { "repository", n => { Repository = n.GetStringValue(); } },
                { "tag", n => { Tag = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_deploy_on_push>("deploy_on_push", DeployOnPush);
            writer.WriteStringValue("digest", Digest);
            writer.WriteStringValue("registry", Registry);
            writer.WriteStringValue("registry_credentials", RegistryCredentials);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Apps_image_source_spec_registry_type>("registry_type", RegistryType);
            writer.WriteStringValue("repository", Repository);
            writer.WriteStringValue("tag", Tag);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
