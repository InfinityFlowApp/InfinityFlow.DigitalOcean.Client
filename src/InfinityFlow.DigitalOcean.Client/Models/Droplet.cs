// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Droplet : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? BackupIds { get; set; }
#nullable restore
#else
        public List<int?> BackupIds { get; set; }
#endif
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the Droplet was created.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The size of the Droplet&apos;s disk in gigabytes.</summary>
        public int? Disk { get; set; }
        /// <summary>An array of objects containing information about the disks available to the Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info>? DiskInfo { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info> DiskInfo { get; set; }
#endif
        /// <summary>An array of features enabled on this Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Features { get; set; }
#nullable restore
#else
        public List<string> Features { get; set; }
#endif
        /// <summary>An object containing information about the GPU capabilities of Droplets created with this size.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info? GpuInfo { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info GpuInfo { get; set; }
#endif
        /// <summary>A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.</summary>
        public int? Id { get; set; }
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Image? Image { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Image Image { get; set; }
#endif
        /// <summary>**Note**: All Droplets created after March 2017 use internal kernels by default.These Droplets will have this attribute set to `null`.The current [kernel](https://docs.digitalocean.com/products/droplets/how-to/kernel/)for Droplets with externally managed kernels. This will initially be set tothe kernel of the base image when the Droplet is created.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Kernel? Kernel { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Kernel Kernel { get; set; }
#endif
        /// <summary>A boolean value indicating whether the Droplet has been locked, preventing actions by users.</summary>
        public bool? Locked { get; set; }
        /// <summary>Memory of the Droplet in megabytes.</summary>
        public int? Memory { get; set; }
        /// <summary>The human-readable name set for the Droplet instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_networks? Networks { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_networks Networks { get; set; }
#endif
        /// <summary>The next_backup_window property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_next_backup_window? NextBackupWindow { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_next_backup_window NextBackupWindow { get; set; }
#endif
        /// <summary>The region property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Region? Region { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Region Region { get; set; }
#endif
        /// <summary>The size property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Size? Size { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Size Size { get; set; }
#endif
        /// <summary>The unique slug identifier for the size of this Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SizeSlug { get; set; }
#nullable restore
#else
        public string SizeSlug { get; set; }
#endif
        /// <summary>An array of snapshot IDs of any snapshots created from the Droplet instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? SnapshotIds { get; set; }
#nullable restore
#else
        public List<int?> SnapshotIds { get; set; }
#endif
        /// <summary>A status string indicating the state of the Droplet instance. This may be &quot;new&quot;, &quot;active&quot;, &quot;off&quot;, or &quot;archive&quot;.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Droplet_status? Status { get; set; }
        /// <summary>An array of Tags the Droplet has been tagged with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The number of virtual CPUs.</summary>
        public int? Vcpus { get; set; }
        /// <summary>A flat array including the unique identifier for each Block Storage volume attached to the Droplet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? VolumeIds { get; set; }
#nullable restore
#else
        public List<string> VolumeIds { get; set; }
#endif
        /// <summary>A string specifying the UUID of the VPC to which the Droplet is assigned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VpcUuid { get; set; }
#nullable restore
#else
        public string VpcUuid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet"/> and sets the default values.
        /// </summary>
        public Droplet()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Droplet"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Droplet CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Droplet();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backup_ids", n => { BackupIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "disk", n => { Disk = n.GetIntValue(); } },
                { "disk_info", n => { DiskInfo = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info>(global::InfinityFlow.DigitalOcean.Client.Models.Disk_info.CreateFromDiscriminatorValue)?.AsList(); } },
                { "features", n => { Features = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "gpu_info", n => { GpuInfo = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info>(global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "image", n => { Image = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Image>(global::InfinityFlow.DigitalOcean.Client.Models.Image.CreateFromDiscriminatorValue); } },
                { "kernel", n => { Kernel = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Kernel>(global::InfinityFlow.DigitalOcean.Client.Models.Kernel.CreateFromDiscriminatorValue); } },
                { "locked", n => { Locked = n.GetBoolValue(); } },
                { "memory", n => { Memory = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "networks", n => { Networks = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_networks>(global::InfinityFlow.DigitalOcean.Client.Models.Droplet_networks.CreateFromDiscriminatorValue); } },
                { "next_backup_window", n => { NextBackupWindow = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_next_backup_window>(global::InfinityFlow.DigitalOcean.Client.Models.Droplet_next_backup_window.CreateFromDiscriminatorValue); } },
                { "region", n => { Region = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Region>(global::InfinityFlow.DigitalOcean.Client.Models.Region.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Size>(global::InfinityFlow.DigitalOcean.Client.Models.Size.CreateFromDiscriminatorValue); } },
                { "size_slug", n => { SizeSlug = n.GetStringValue(); } },
                { "snapshot_ids", n => { SnapshotIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_status>(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "vcpus", n => { Vcpus = n.GetIntValue(); } },
                { "volume_ids", n => { VolumeIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "vpc_uuid", n => { VpcUuid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("backup_ids", BackupIds);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteIntValue("disk", Disk);
            writer.WriteCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Disk_info>("disk_info", DiskInfo);
            writer.WriteCollectionOfPrimitiveValues<string>("features", Features);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Gpu_info>("gpu_info", GpuInfo);
            writer.WriteIntValue("id", Id);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Image>("image", Image);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Kernel>("kernel", Kernel);
            writer.WriteBoolValue("locked", Locked);
            writer.WriteIntValue("memory", Memory);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_networks>("networks", Networks);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_next_backup_window>("next_backup_window", NextBackupWindow);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Region>("region", Region);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Size>("size", Size);
            writer.WriteStringValue("size_slug", SizeSlug);
            writer.WriteCollectionOfPrimitiveValues<int?>("snapshot_ids", SnapshotIds);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Droplet_status>("status", Status);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteIntValue("vcpus", Vcpus);
            writer.WriteCollectionOfPrimitiveValues<string>("volume_ids", VolumeIds);
            writer.WriteStringValue("vpc_uuid", VpcUuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
