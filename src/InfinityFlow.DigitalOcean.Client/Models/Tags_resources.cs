// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// An embedded object containing key value pairs of resource type and resource statistics. It also includes a count of the total number of resources tagged with the current tag as well as a `last_tagged_uri` attribute set to the last resource tagged with the current tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Tags_resources : global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata, IParsable
    {
        /// <summary>Tagged Resource Statistics include metadata regarding the resource type that has been tagged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata? Databases { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata Databases { get; set; }
#endif
        /// <summary>Tagged Resource Statistics include metadata regarding the resource type that has been tagged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata? Droplets { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata Droplets { get; set; }
#endif
        /// <summary>Tagged Resource Statistics include metadata regarding the resource type that has been tagged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata? Imgages { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata Imgages { get; set; }
#endif
        /// <summary>Tagged Resource Statistics include metadata regarding the resource type that has been tagged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata? Volumes { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata Volumes { get; set; }
#endif
        /// <summary>Tagged Resource Statistics include metadata regarding the resource type that has been tagged.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata? VolumeSnapshots { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata VolumeSnapshots { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Tags_resources"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::InfinityFlow.DigitalOcean.Client.Models.Tags_resources CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Tags_resources();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "databases", n => { Databases = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>(global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata.CreateFromDiscriminatorValue); } },
                { "droplets", n => { Droplets = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>(global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata.CreateFromDiscriminatorValue); } },
                { "imgages", n => { Imgages = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>(global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata.CreateFromDiscriminatorValue); } },
                { "volume_snapshots", n => { VolumeSnapshots = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>(global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata.CreateFromDiscriminatorValue); } },
                { "volumes", n => { Volumes = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>(global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>("databases", Databases);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>("droplets", Droplets);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>("imgages", Imgages);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>("volume_snapshots", VolumeSnapshots);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Tags_metadata>("volumes", Volumes);
        }
    }
}
#pragma warning restore CS0618
