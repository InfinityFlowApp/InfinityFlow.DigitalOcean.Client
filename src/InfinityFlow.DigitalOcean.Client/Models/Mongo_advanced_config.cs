// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Mongo_advanced_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value.  Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config_default_read_concern? DefaultReadConcern { get; set; }
        /// <summary>Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number `0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation.  Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultWriteConcern { get; set; }
#nullable restore
#else
        public string DefaultWriteConcern { get; set; }
#endif
        /// <summary>Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs.  Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node.  *Changing this parameter will lead to a restart of the MongoDB service.* Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).</summary>
        public int? SlowOpThresholdMs { get; set; }
        /// <summary>Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be  aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least  once every 60 seconds. *Changing this parameter will lead to a restart of the MongoDB service.* Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).</summary>
        public int? TransactionLifetimeLimitSeconds { get; set; }
        /// <summary>The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. *Changing this parameter will lead to a restart of the MongoDB service.* Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).</summary>
        public int? Verbosity { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config"/> and sets the default values.
        /// </summary>
        public Mongo_advanced_config()
        {
            AdditionalData = new Dictionary<string, object>();
            DefaultReadConcern = global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config_default_read_concern.Local;
            DefaultWriteConcern = "majority";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "default_read_concern", n => { DefaultReadConcern = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config_default_read_concern>(); } },
                { "default_write_concern", n => { DefaultWriteConcern = n.GetStringValue(); } },
                { "slow_op_threshold_ms", n => { SlowOpThresholdMs = n.GetIntValue(); } },
                { "transaction_lifetime_limit_seconds", n => { TransactionLifetimeLimitSeconds = n.GetIntValue(); } },
                { "verbosity", n => { Verbosity = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Mongo_advanced_config_default_read_concern>("default_read_concern", DefaultReadConcern);
            writer.WriteStringValue("default_write_concern", DefaultWriteConcern);
            writer.WriteIntValue("slow_op_threshold_ms", SlowOpThresholdMs);
            writer.WriteIntValue("transaction_lifetime_limit_seconds", TransactionLifetimeLimitSeconds);
            writer.WriteIntValue("verbosity", Verbosity);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
