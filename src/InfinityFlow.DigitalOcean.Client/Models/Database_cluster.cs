// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Database_cluster : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection? Connection { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection Connection { get; set; }
#endif
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the database cluster was created.</summary>
        public DateTimeOffset? CreatedAt { get; private set; }
        /// <summary>An array of strings containing the names of databases created in the database cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DbNames { get; private set; }
#nullable restore
#else
        public List<string> DbNames { get; private set; }
#endif
        /// <summary>A slug representing the database engine used for the cluster. The possible values are: &quot;pg&quot; for PostgreSQL, &quot;mysql&quot; for MySQL, &quot;redis&quot; for Redis, &quot;mongodb&quot; for MongoDB, &quot;kafka&quot; for Kafka, and &quot;opensearch&quot; for OpenSearch.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster_engine? Engine { get; set; }
        /// <summary>A unique ID that can be used to identify and reference a database cluster.</summary>
        public Guid? Id { get; private set; }
        /// <summary>The maintenance_window property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_maintenance_window? MaintenanceWindow { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_maintenance_window MaintenanceWindow { get; set; }
#endif
        /// <summary>Public hostname and port of the cluster&apos;s metrics endpoint(s). Includes one record for the cluster&apos;s primary node and a second entry for the cluster&apos;s standby node(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Database_service_endpoint>? MetricsEndpoints { get; private set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Database_service_endpoint> MetricsEndpoints { get; private set; }
#endif
        /// <summary>A unique, human-readable name referring to a database cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The number of nodes in the database cluster.</summary>
        public int? NumNodes { get; set; }
        /// <summary>The private_connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection? PrivateConnection { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection PrivateConnection { get; set; }
#endif
        /// <summary>A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account&apos;s default VPC for the region.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrivateNetworkUuid { get; set; }
#nullable restore
#else
        public string PrivateNetworkUuid { get; set; }
#endif
        /// <summary>The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.</summary>
        public Guid? ProjectId { get; set; }
        /// <summary>The slug identifier for the region where the database cluster is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>The rules property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Firewall_rule>? Rules { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Firewall_rule> Rules { get; set; }
#endif
        /// <summary>A string representing the semantic version of the database engine in use for the cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SemanticVersion { get; private set; }
#nullable restore
#else
        public string SemanticVersion { get; private set; }
#endif
        /// <summary>The slug identifier representing the size of the nodes in the database cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Size { get; set; }
#nullable restore
#else
        public string Size { get; set; }
#endif
        /// <summary>The standby_connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection? StandbyConnection { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection StandbyConnection { get; set; }
#endif
        /// <summary>The standby_private_connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection? StandbyPrivateConnection { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_connection StandbyPrivateConnection { get; set; }
#endif
        /// <summary>A string representing the current status of the database cluster.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster_status? Status { get; private set; }
        /// <summary>Additional storage added to the cluster, in MiB. If null, no additional storage is added to the cluster, beyond what is provided as a base amount from the &apos;size&apos; and any previously added additional storage.</summary>
        public int? StorageSizeMib { get; set; }
        /// <summary>An array of tags that have been applied to the database cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The connection details for OpenSearch dashboard. </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Opensearch_connection? UiConnection { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Opensearch_connection UiConnection { get; set; }
#endif
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Database_user>? Users { get; private set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Database_user> Users { get; private set; }
#endif
        /// <summary>A string representing the version of the database engine in use for the cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>A timestamp referring to the date when the particular version will no longer be available for creating new clusters. If null, the version does not have an end of availability timeline.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VersionEndOfAvailability { get; private set; }
#nullable restore
#else
        public string VersionEndOfAvailability { get; private set; }
#endif
        /// <summary>A timestamp referring to the date when the particular version will no longer be supported. If null, the version does not have an end of life timeline.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VersionEndOfLife { get; private set; }
#nullable restore
#else
        public string VersionEndOfLife { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster"/> and sets the default values.
        /// </summary>
        public Database_cluster()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "connection", n => { Connection = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>(global::InfinityFlow.DigitalOcean.Client.Models.Database_connection.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "db_names", n => { DbNames = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "engine", n => { Engine = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster_engine>(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "maintenance_window", n => { MaintenanceWindow = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_maintenance_window>(global::InfinityFlow.DigitalOcean.Client.Models.Database_maintenance_window.CreateFromDiscriminatorValue); } },
                { "metrics_endpoints", n => { MetricsEndpoints = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Database_service_endpoint>(global::InfinityFlow.DigitalOcean.Client.Models.Database_service_endpoint.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "num_nodes", n => { NumNodes = n.GetIntValue(); } },
                { "private_connection", n => { PrivateConnection = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>(global::InfinityFlow.DigitalOcean.Client.Models.Database_connection.CreateFromDiscriminatorValue); } },
                { "private_network_uuid", n => { PrivateNetworkUuid = n.GetStringValue(); } },
                { "project_id", n => { ProjectId = n.GetGuidValue(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "rules", n => { Rules = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Firewall_rule>(global::InfinityFlow.DigitalOcean.Client.Models.Firewall_rule.CreateFromDiscriminatorValue)?.AsList(); } },
                { "semantic_version", n => { SemanticVersion = n.GetStringValue(); } },
                { "size", n => { Size = n.GetStringValue(); } },
                { "standby_connection", n => { StandbyConnection = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>(global::InfinityFlow.DigitalOcean.Client.Models.Database_connection.CreateFromDiscriminatorValue); } },
                { "standby_private_connection", n => { StandbyPrivateConnection = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>(global::InfinityFlow.DigitalOcean.Client.Models.Database_connection.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster_status>(); } },
                { "storage_size_mib", n => { StorageSizeMib = n.GetIntValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ui_connection", n => { UiConnection = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Opensearch_connection>(global::InfinityFlow.DigitalOcean.Client.Models.Opensearch_connection.CreateFromDiscriminatorValue); } },
                { "users", n => { Users = n.GetCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Database_user>(global::InfinityFlow.DigitalOcean.Client.Models.Database_user.CreateFromDiscriminatorValue)?.AsList(); } },
                { "version", n => { Version = n.GetStringValue(); } },
                { "version_end_of_availability", n => { VersionEndOfAvailability = n.GetStringValue(); } },
                { "version_end_of_life", n => { VersionEndOfLife = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>("connection", Connection);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_cluster_engine>("engine", Engine);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_maintenance_window>("maintenance_window", MaintenanceWindow);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("num_nodes", NumNodes);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>("private_connection", PrivateConnection);
            writer.WriteStringValue("private_network_uuid", PrivateNetworkUuid);
            writer.WriteGuidValue("project_id", ProjectId);
            writer.WriteStringValue("region", Region);
            writer.WriteCollectionOfObjectValues<global::InfinityFlow.DigitalOcean.Client.Models.Firewall_rule>("rules", Rules);
            writer.WriteStringValue("size", Size);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>("standby_connection", StandbyConnection);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Database_connection>("standby_private_connection", StandbyPrivateConnection);
            writer.WriteIntValue("storage_size_mib", StorageSizeMib);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Opensearch_connection>("ui_connection", UiConnection);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
