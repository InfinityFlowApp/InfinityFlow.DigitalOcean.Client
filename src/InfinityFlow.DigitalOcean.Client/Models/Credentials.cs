// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Credentials : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A base64 encoding of bytes representing the certificate authority data for accessing the cluster.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CertificateAuthorityData { get; set; }
#nullable restore
#else
        public string CertificateAuthorityData { get; set; }
#endif
        /// <summary>A base64 encoding of bytes representing the x509 clientcertificate data for access the cluster. This is only returned for clusterswithout support for token-based authentication.Newly created Kubernetes clusters do not return credentials usingcertificate-based authentication. For additional information,[see here](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/#authenticate).</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientCertificateData { get; set; }
#nullable restore
#else
        public string ClientCertificateData { get; set; }
#endif
        /// <summary>A base64 encoding of bytes representing the x509 client keydata for access the cluster. This is only returned for clusters withoutsupport for token-based authentication.Newly created Kubernetes clusters do not return credentials usingcertificate-based authentication. For additional information,[see here](https://docs.digitalocean.com/products/kubernetes/how-to/connect-to-cluster/#authenticate).</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientKeyData { get; set; }
#nullable restore
#else
        public string ClientKeyData { get; set; }
#endif
        /// <summary>A time value given in ISO8601 combined date and time format that represents when the access token expires.</summary>
        public DateTimeOffset? ExpiresAt { get; set; }
        /// <summary>The URL used to access the cluster API server.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Server { get; set; }
#nullable restore
#else
        public string Server { get; set; }
#endif
        /// <summary>An access token used to authenticate with the cluster. This is only returned for clusters with support for token-based authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Credentials"/> and sets the default values.
        /// </summary>
        public Credentials()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Credentials"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Credentials CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Credentials();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "certificate_authority_data", n => { CertificateAuthorityData = n.GetStringValue(); } },
                { "client_certificate_data", n => { ClientCertificateData = n.GetStringValue(); } },
                { "client_key_data", n => { ClientKeyData = n.GetStringValue(); } },
                { "expires_at", n => { ExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "server", n => { Server = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("certificate_authority_data", CertificateAuthorityData);
            writer.WriteStringValue("client_certificate_data", ClientCertificateData);
            writer.WriteStringValue("client_key_data", ClientKeyData);
            writer.WriteDateTimeOffsetValue("expires_at", ExpiresAt);
            writer.WriteStringValue("server", Server);
            writer.WriteStringValue("token", Token);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
