// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Postgres_advanced_config : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).</summary>
        public double? AutovacuumAnalyzeScaleFactor { get; set; }
        /// <summary>Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.</summary>
        public int? AutovacuumAnalyzeThreshold { get; set; }
        /// <summary>Specifies the maximum age (in transactions) that a table&apos;s pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.</summary>
        public int? AutovacuumFreezeMaxAge { get; set; }
        /// <summary>Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.</summary>
        public int? AutovacuumMaxWorkers { get; set; }
        /// <summary>Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.</summary>
        public int? AutovacuumNaptime { get; set; }
        /// <summary>Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.</summary>
        public int? AutovacuumVacuumCostDelay { get; set; }
        /// <summary>Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.</summary>
        public int? AutovacuumVacuumCostLimit { get; set; }
        /// <summary>Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).</summary>
        public double? AutovacuumVacuumScaleFactor { get; set; }
        /// <summary>Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.</summary>
        public int? AutovacuumVacuumThreshold { get; set; }
        /// <summary>The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.</summary>
        public int? BackupHour { get; set; }
        /// <summary>The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.</summary>
        public int? BackupMinute { get; set; }
        /// <summary>Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.</summary>
        public int? BgwriterDelay { get; set; }
        /// <summary>The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512.  Setting of 0 disables forced writeback.</summary>
        public int? BgwriterFlushAfter { get; set; }
        /// <summary>The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.</summary>
        public int? BgwriterLruMaxpages { get; set; }
        /// <summary>The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.</summary>
        public double? BgwriterLruMultiplier { get; set; }
        /// <summary>The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.</summary>
        public int? DeadlockTimeout { get; set; }
        /// <summary>Specifies the default TOAST compression method for values of compressible columns (the default is lz4).</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_default_toast_compression? DefaultToastCompression { get; set; }
        /// <summary>Time out sessions with open transactions after this number of milliseconds</summary>
        public int? IdleInTransactionSessionTimeout { get; set; }
        /// <summary>Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).</summary>
        public bool? Jit { get; set; }
        /// <summary>Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.</summary>
        public int? LogAutovacuumMinDuration { get; set; }
        /// <summary>Controls the amount of detail written in the server log for each message that is logged.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_log_error_verbosity? LogErrorVerbosity { get; set; }
        /// <summary>Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_log_line_prefix? LogLinePrefix { get; set; }
        /// <summary>Log statements that take more than this number of milliseconds to run. If -1, disables.</summary>
        public int? LogMinDurationStatement { get; set; }
        /// <summary>Number of seconds of master unavailability before triggering database failover to standby. The default value is 60.</summary>
        public int? MaxFailoverReplicationTimeLag { get; set; }
        /// <summary>PostgreSQL maximum number of files that can be open per process.</summary>
        public int? MaxFilesPerProcess { get; set; }
        /// <summary>PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.</summary>
        public int? MaxLocksPerTransaction { get; set; }
        /// <summary>PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).</summary>
        public int? MaxLogicalReplicationWorkers { get; set; }
        /// <summary>Sets the maximum number of workers that the system can support for parallel queries.</summary>
        public int? MaxParallelWorkers { get; set; }
        /// <summary>Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.</summary>
        public int? MaxParallelWorkersPerGather { get; set; }
        /// <summary>PostgreSQL maximum predicate locks per transaction.</summary>
        public int? MaxPredLocksPerTransaction { get; set; }
        /// <summary>PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.</summary>
        public int? MaxPreparedTransactions { get; set; }
        /// <summary>PostgreSQL maximum replication slots.</summary>
        public int? MaxReplicationSlots { get; set; }
        /// <summary>Maximum depth of the stack in bytes.</summary>
        public int? MaxStackDepth { get; set; }
        /// <summary>Max standby archive delay in milliseconds.</summary>
        public int? MaxStandbyArchiveDelay { get; set; }
        /// <summary>Max standby streaming delay in milliseconds.</summary>
        public int? MaxStandbyStreamingDelay { get; set; }
        /// <summary>PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.</summary>
        public int? MaxWalSenders { get; set; }
        /// <summary>Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.</summary>
        public int? MaxWorkerProcesses { get; set; }
        /// <summary>PGBouncer connection pooling settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config? Pgbouncer { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config Pgbouncer { get; set; }
#endif
        /// <summary>Sets the time interval to run pg_partman&apos;s scheduled tasks.</summary>
        public int? PgPartmanBgwInterval { get; set; }
        /// <summary>Controls which role to use for pg_partman&apos;s scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PgPartmanBgwRole { get; set; }
#nullable restore
#else
        public string PgPartmanBgwRole { get; set; }
#endif
        /// <summary>Controls which statements are counted. Specify &apos;top&apos; to track top-level statements (those issued directly by clients), &apos;all&apos; to also track nested statements (such as statements invoked within functions), or &apos;none&apos; to disable statement statistics collection. The default value is top.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_pg_stat_statementsTrack? PgStatStatementsTrack { get; set; }
        /// <summary>Percentage of total RAM that the database server uses for shared memory buffers.  Valid range is 20-60 (float), which corresponds to 20% - 60%.  This setting adjusts the shared_buffers configuration value.</summary>
        public double? SharedBuffersPercentage { get; set; }
        /// <summary>Enable the pg_stat_monitor extension. &lt;b&gt;Enabling this extension will cause the cluster to be restarted.&lt;/b&gt; When this extension is enabled, pg_stat_statements results for utility commands are unreliable.</summary>
        public bool? StatMonitorEnable { get; set; }
        /// <summary>Synchronous replication type. Note that the service plan also needs to support synchronous replication.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_synchronous_replication? SynchronousReplication { get; set; }
        /// <summary>PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.</summary>
        public int? TempFileLimit { get; set; }
        /// <summary>TimescaleDB extension configuration values</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::InfinityFlow.DigitalOcean.Client.Models.Timescaledb_advanced_config? Timescaledb { get; set; }
#nullable restore
#else
        public global::InfinityFlow.DigitalOcean.Client.Models.Timescaledb_advanced_config Timescaledb { get; set; }
#endif
        /// <summary>PostgreSQL service timezone</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>Specifies the number of bytes reserved to track the currently executing command for each active session.</summary>
        public int? TrackActivityQuerySize { get; set; }
        /// <summary>Record commit time of transactions.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_commit_timestamp? TrackCommitTimestamp { get; set; }
        /// <summary>Enables tracking of function call counts and time used.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_functions? TrackFunctions { get; set; }
        /// <summary>Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_io_timing? TrackIoTiming { get; set; }
        /// <summary>Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.</summary>
        public int? WalSenderTimeout { get; set; }
        /// <summary>WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance</summary>
        public int? WalWriterDelay { get; set; }
        /// <summary>The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).</summary>
        public int? WorkMem { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config"/> and sets the default values.
        /// </summary>
        public Postgres_advanced_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "autovacuum_analyze_scale_factor", n => { AutovacuumAnalyzeScaleFactor = n.GetDoubleValue(); } },
                { "autovacuum_analyze_threshold", n => { AutovacuumAnalyzeThreshold = n.GetIntValue(); } },
                { "autovacuum_freeze_max_age", n => { AutovacuumFreezeMaxAge = n.GetIntValue(); } },
                { "autovacuum_max_workers", n => { AutovacuumMaxWorkers = n.GetIntValue(); } },
                { "autovacuum_naptime", n => { AutovacuumNaptime = n.GetIntValue(); } },
                { "autovacuum_vacuum_cost_delay", n => { AutovacuumVacuumCostDelay = n.GetIntValue(); } },
                { "autovacuum_vacuum_cost_limit", n => { AutovacuumVacuumCostLimit = n.GetIntValue(); } },
                { "autovacuum_vacuum_scale_factor", n => { AutovacuumVacuumScaleFactor = n.GetDoubleValue(); } },
                { "autovacuum_vacuum_threshold", n => { AutovacuumVacuumThreshold = n.GetIntValue(); } },
                { "backup_hour", n => { BackupHour = n.GetIntValue(); } },
                { "backup_minute", n => { BackupMinute = n.GetIntValue(); } },
                { "bgwriter_delay", n => { BgwriterDelay = n.GetIntValue(); } },
                { "bgwriter_flush_after", n => { BgwriterFlushAfter = n.GetIntValue(); } },
                { "bgwriter_lru_maxpages", n => { BgwriterLruMaxpages = n.GetIntValue(); } },
                { "bgwriter_lru_multiplier", n => { BgwriterLruMultiplier = n.GetDoubleValue(); } },
                { "deadlock_timeout", n => { DeadlockTimeout = n.GetIntValue(); } },
                { "default_toast_compression", n => { DefaultToastCompression = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_default_toast_compression>(); } },
                { "idle_in_transaction_session_timeout", n => { IdleInTransactionSessionTimeout = n.GetIntValue(); } },
                { "jit", n => { Jit = n.GetBoolValue(); } },
                { "log_autovacuum_min_duration", n => { LogAutovacuumMinDuration = n.GetIntValue(); } },
                { "log_error_verbosity", n => { LogErrorVerbosity = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_log_error_verbosity>(); } },
                { "log_line_prefix", n => { LogLinePrefix = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_log_line_prefix>(); } },
                { "log_min_duration_statement", n => { LogMinDurationStatement = n.GetIntValue(); } },
                { "max_failover_replication_time_lag", n => { MaxFailoverReplicationTimeLag = n.GetIntValue(); } },
                { "max_files_per_process", n => { MaxFilesPerProcess = n.GetIntValue(); } },
                { "max_locks_per_transaction", n => { MaxLocksPerTransaction = n.GetIntValue(); } },
                { "max_logical_replication_workers", n => { MaxLogicalReplicationWorkers = n.GetIntValue(); } },
                { "max_parallel_workers", n => { MaxParallelWorkers = n.GetIntValue(); } },
                { "max_parallel_workers_per_gather", n => { MaxParallelWorkersPerGather = n.GetIntValue(); } },
                { "max_pred_locks_per_transaction", n => { MaxPredLocksPerTransaction = n.GetIntValue(); } },
                { "max_prepared_transactions", n => { MaxPreparedTransactions = n.GetIntValue(); } },
                { "max_replication_slots", n => { MaxReplicationSlots = n.GetIntValue(); } },
                { "max_stack_depth", n => { MaxStackDepth = n.GetIntValue(); } },
                { "max_standby_archive_delay", n => { MaxStandbyArchiveDelay = n.GetIntValue(); } },
                { "max_standby_streaming_delay", n => { MaxStandbyStreamingDelay = n.GetIntValue(); } },
                { "max_wal_senders", n => { MaxWalSenders = n.GetIntValue(); } },
                { "max_worker_processes", n => { MaxWorkerProcesses = n.GetIntValue(); } },
                { "pg_partman_bgw.interval", n => { PgPartmanBgwInterval = n.GetIntValue(); } },
                { "pg_partman_bgw.role", n => { PgPartmanBgwRole = n.GetStringValue(); } },
                { "pg_stat_statements.track", n => { PgStatStatementsTrack = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_pg_stat_statementsTrack>(); } },
                { "pgbouncer", n => { Pgbouncer = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config>(global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config.CreateFromDiscriminatorValue); } },
                { "shared_buffers_percentage", n => { SharedBuffersPercentage = n.GetDoubleValue(); } },
                { "stat_monitor_enable", n => { StatMonitorEnable = n.GetBoolValue(); } },
                { "synchronous_replication", n => { SynchronousReplication = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_synchronous_replication>(); } },
                { "temp_file_limit", n => { TempFileLimit = n.GetIntValue(); } },
                { "timescaledb", n => { Timescaledb = n.GetObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Timescaledb_advanced_config>(global::InfinityFlow.DigitalOcean.Client.Models.Timescaledb_advanced_config.CreateFromDiscriminatorValue); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
                { "track_activity_query_size", n => { TrackActivityQuerySize = n.GetIntValue(); } },
                { "track_commit_timestamp", n => { TrackCommitTimestamp = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_commit_timestamp>(); } },
                { "track_functions", n => { TrackFunctions = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_functions>(); } },
                { "track_io_timing", n => { TrackIoTiming = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_io_timing>(); } },
                { "wal_sender_timeout", n => { WalSenderTimeout = n.GetIntValue(); } },
                { "wal_writer_delay", n => { WalWriterDelay = n.GetIntValue(); } },
                { "work_mem", n => { WorkMem = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("autovacuum_analyze_scale_factor", AutovacuumAnalyzeScaleFactor);
            writer.WriteIntValue("autovacuum_analyze_threshold", AutovacuumAnalyzeThreshold);
            writer.WriteIntValue("autovacuum_freeze_max_age", AutovacuumFreezeMaxAge);
            writer.WriteIntValue("autovacuum_max_workers", AutovacuumMaxWorkers);
            writer.WriteIntValue("autovacuum_naptime", AutovacuumNaptime);
            writer.WriteIntValue("autovacuum_vacuum_cost_delay", AutovacuumVacuumCostDelay);
            writer.WriteIntValue("autovacuum_vacuum_cost_limit", AutovacuumVacuumCostLimit);
            writer.WriteDoubleValue("autovacuum_vacuum_scale_factor", AutovacuumVacuumScaleFactor);
            writer.WriteIntValue("autovacuum_vacuum_threshold", AutovacuumVacuumThreshold);
            writer.WriteIntValue("backup_hour", BackupHour);
            writer.WriteIntValue("backup_minute", BackupMinute);
            writer.WriteIntValue("bgwriter_delay", BgwriterDelay);
            writer.WriteIntValue("bgwriter_flush_after", BgwriterFlushAfter);
            writer.WriteIntValue("bgwriter_lru_maxpages", BgwriterLruMaxpages);
            writer.WriteDoubleValue("bgwriter_lru_multiplier", BgwriterLruMultiplier);
            writer.WriteIntValue("deadlock_timeout", DeadlockTimeout);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_default_toast_compression>("default_toast_compression", DefaultToastCompression);
            writer.WriteIntValue("idle_in_transaction_session_timeout", IdleInTransactionSessionTimeout);
            writer.WriteBoolValue("jit", Jit);
            writer.WriteIntValue("log_autovacuum_min_duration", LogAutovacuumMinDuration);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_log_error_verbosity>("log_error_verbosity", LogErrorVerbosity);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_log_line_prefix>("log_line_prefix", LogLinePrefix);
            writer.WriteIntValue("log_min_duration_statement", LogMinDurationStatement);
            writer.WriteIntValue("max_failover_replication_time_lag", MaxFailoverReplicationTimeLag);
            writer.WriteIntValue("max_files_per_process", MaxFilesPerProcess);
            writer.WriteIntValue("max_locks_per_transaction", MaxLocksPerTransaction);
            writer.WriteIntValue("max_logical_replication_workers", MaxLogicalReplicationWorkers);
            writer.WriteIntValue("max_parallel_workers", MaxParallelWorkers);
            writer.WriteIntValue("max_parallel_workers_per_gather", MaxParallelWorkersPerGather);
            writer.WriteIntValue("max_pred_locks_per_transaction", MaxPredLocksPerTransaction);
            writer.WriteIntValue("max_prepared_transactions", MaxPreparedTransactions);
            writer.WriteIntValue("max_replication_slots", MaxReplicationSlots);
            writer.WriteIntValue("max_stack_depth", MaxStackDepth);
            writer.WriteIntValue("max_standby_archive_delay", MaxStandbyArchiveDelay);
            writer.WriteIntValue("max_standby_streaming_delay", MaxStandbyStreamingDelay);
            writer.WriteIntValue("max_wal_senders", MaxWalSenders);
            writer.WriteIntValue("max_worker_processes", MaxWorkerProcesses);
            writer.WriteIntValue("pg_partman_bgw.interval", PgPartmanBgwInterval);
            writer.WriteStringValue("pg_partman_bgw.role", PgPartmanBgwRole);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_pg_stat_statementsTrack>("pg_stat_statements.track", PgStatStatementsTrack);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config>("pgbouncer", Pgbouncer);
            writer.WriteDoubleValue("shared_buffers_percentage", SharedBuffersPercentage);
            writer.WriteBoolValue("stat_monitor_enable", StatMonitorEnable);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_synchronous_replication>("synchronous_replication", SynchronousReplication);
            writer.WriteIntValue("temp_file_limit", TempFileLimit);
            writer.WriteObjectValue<global::InfinityFlow.DigitalOcean.Client.Models.Timescaledb_advanced_config>("timescaledb", Timescaledb);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteIntValue("track_activity_query_size", TrackActivityQuerySize);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_commit_timestamp>("track_commit_timestamp", TrackCommitTimestamp);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_functions>("track_functions", TrackFunctions);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Postgres_advanced_config_track_io_timing>("track_io_timing", TrackIoTiming);
            writer.WriteIntValue("wal_sender_timeout", WalSenderTimeout);
            writer.WriteIntValue("wal_writer_delay", WalWriterDelay);
            writer.WriteIntValue("work_mem", WorkMem);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
