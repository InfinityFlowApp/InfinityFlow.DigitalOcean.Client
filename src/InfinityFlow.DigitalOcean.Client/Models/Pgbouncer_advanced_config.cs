// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace InfinityFlow.DigitalOcean.Client.Models
{
    /// <summary>
    /// PGBouncer connection pooling settings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Pgbouncer_advanced_config : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If the automatically-created database pools have been unused this many seconds, they are freed. If 0, timeout is disabled.</summary>
        public int? AutodbIdleTimeout { get; set; }
        /// <summary>Only allows a maximum this many server connections per database (regardless of user). If 0, allows unlimited connections.</summary>
        public int? AutodbMaxDbConnections { get; set; }
        /// <summary>PGBouncer pool mode</summary>
        public global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_autodb_pool_mode? AutodbPoolMode { get; set; }
        /// <summary>If non-zero, automatically creates a pool of that size per user when a pool doesn&apos;t exist.</summary>
        public int? AutodbPoolSize { get; set; }
        /// <summary>List of parameters to ignore when given in startup packet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_ignore_startup_parameters?>? IgnoreStartupParameters { get; set; }
#nullable restore
#else
        public List<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_ignore_startup_parameters?> IgnoreStartupParameters { get; set; }
#endif
        /// <summary>If current server connections are below this number, adds more. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.</summary>
        public int? MinPoolSize { get; set; }
        /// <summary>Drops server connections if they have been idle more than this many seconds.  If 0, timeout is disabled. </summary>
        public int? ServerIdleTimeout { get; set; }
        /// <summary>The pooler closes any unused server connection that has been connected longer than this amount of seconds.</summary>
        public int? ServerLifetime { get; set; }
        /// <summary>Run server_reset_query (DISCARD ALL) in all pooling modes.</summary>
        public bool? ServerResetQueryAlways { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config"/> and sets the default values.
        /// </summary>
        public Pgbouncer_advanced_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "autodb_idle_timeout", n => { AutodbIdleTimeout = n.GetIntValue(); } },
                { "autodb_max_db_connections", n => { AutodbMaxDbConnections = n.GetIntValue(); } },
                { "autodb_pool_mode", n => { AutodbPoolMode = n.GetEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_autodb_pool_mode>(); } },
                { "autodb_pool_size", n => { AutodbPoolSize = n.GetIntValue(); } },
                { "ignore_startup_parameters", n => { IgnoreStartupParameters = n.GetCollectionOfEnumValues<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_ignore_startup_parameters>()?.AsList(); } },
                { "min_pool_size", n => { MinPoolSize = n.GetIntValue(); } },
                { "server_idle_timeout", n => { ServerIdleTimeout = n.GetIntValue(); } },
                { "server_lifetime", n => { ServerLifetime = n.GetIntValue(); } },
                { "server_reset_query_always", n => { ServerResetQueryAlways = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("autodb_idle_timeout", AutodbIdleTimeout);
            writer.WriteIntValue("autodb_max_db_connections", AutodbMaxDbConnections);
            writer.WriteEnumValue<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_autodb_pool_mode>("autodb_pool_mode", AutodbPoolMode);
            writer.WriteIntValue("autodb_pool_size", AutodbPoolSize);
            writer.WriteCollectionOfEnumValues<global::InfinityFlow.DigitalOcean.Client.Models.Pgbouncer_advanced_config_ignore_startup_parameters>("ignore_startup_parameters", IgnoreStartupParameters);
            writer.WriteIntValue("min_pool_size", MinPoolSize);
            writer.WriteIntValue("server_idle_timeout", ServerIdleTimeout);
            writer.WriteIntValue("server_lifetime", ServerLifetime);
            writer.WriteBoolValue("server_reset_query_always", ServerResetQueryAlways);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
